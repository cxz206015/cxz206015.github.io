<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小记</title>
      <link href="/2024/04/01/2024-04-01-%E5%B0%8F%E8%AE%B0/"/>
      <url>/2024/04/01/2024-04-01-%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前后端传参"><a href="#前后端传参" class="headerlink" title="前后端传参"></a>前后端传参</h2><h3 id="x-www-form-urlencoded-和-form-data-和-json"><a href="#x-www-form-urlencoded-和-form-data-和-json" class="headerlink" title="x-www-form-urlencoded 和 form-data 和 json"></a>x-www-form-urlencoded 和 form-data 和 json</h3><ol><li><p><strong>x-www-form-urlencoded</strong>：只能上传键值对，并且键值对都是间隔分开的</p><p><strong>multipart&#x2F;form-data</strong>：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；</p></li><li><p><strong>x-www-form-urlencoded</strong>： Post传参的默认格式，使用js中URLencode转码方法。包括将name、value中的空格替换为加号；将非ascii字符做百分号编码；将input的name、value用‘&#x3D;’连接，不同的input之间用‘&amp;’连接。这种post格式跟get的区别在于：get把转换、拼接完的字符串用‘?’直接与表单的action连接作为URL使用，所以请求体里没有数据；而post把转换、拼接后的字符串放在了请求体里，不会在浏览器的地址栏显示，因而更安全一些。对于一段utf8编码的字节，用application&#x2F;x-www-form-urlencoded传输其中的ascii字符没有问题，但对于非ascii字符传输效率就很低了，因此在传很长的字节（如文件）时应用multipart&#x2F;form-data格式。smtp等协议也使用或借鉴了此格式。</p><p><strong>multipart&#x2F;form-data</strong>：将表单中的每个input转为了一个由boundary分割的小格式，没有转码，直接将utf8字节拼接到请求体中，在本地有多少字节实际就发送多少字节，极大提高了效率，适合传输长字节。</p><p><strong>json</strong>：现在很多时候也把它作为请求头，用来告诉服务端消息主体是序列化的JSON字符串，除了低版本的IE，基本都支持。除了低版本的IE都支持JSON.stringify（）的方法，服务端也有处理JSON的函数，使用JSON不会有任何麻烦。</p></li><li><p>当传入参数是x-www-form-urlencoded，接收参数@RequestBody+ String&#x2F;Map&#x2F;LinkedHashMap即可接收成功</p></li></ol><h3 id="post和get请求"><a href="#post和get请求" class="headerlink" title="post和get请求"></a>post和get请求</h3><h4 id="①-发送get请求将参数通过？拼接在url后面"><a href="#①-发送get请求将参数通过？拼接在url后面" class="headerlink" title="① 发送get请求将参数通过？拼接在url后面"></a>① 发送get请求将参数通过？拼接在url后面</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/order/userPage?page=&quot;</span>+page+<span class="string">&quot;&amp;pageSize=&quot;</span>+pageSize,    <span class="comment">//请求的url地址  </span></span><br><span class="line">        <span class="attr">cache</span>: <span class="string">&quot;false&quot;</span>,   <span class="comment">//设置为false将不会从浏览器中加载请求信息</span></span><br><span class="line">        <span class="attr">async</span>: <span class="string">&quot;true&quot;</span>,    <span class="comment">//true所有请求均为异步请求</span></span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>, <span class="comment">//请求返回数据的格式</span></span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;get&quot;</span>,      <span class="comment">//请求方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面等同于==&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">initData</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="attr">paging</span>: &#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">5</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">orderPagingApi</span>(<span class="variable language_">this</span>.<span class="property">paging</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">orderPagingApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/order/userPage&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="comment">//请求参数</span></span><br><span class="line">        <span class="attr">params</span>: &#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面等同于==&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">initData</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="attr">paging</span>: &#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">5</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">orderPagingApi</span>(<span class="variable language_">this</span>.<span class="property">paging</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">orderPagingApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/order/userPage&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端接收参数   @RequestParam 可加可不加</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/order/userPage&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">userPage</span><span class="params">(<span class="meta">@RequestParam(&quot;page&quot;)</span>Integer page,Integer pageSize)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="②-将参数拼接在url中，后台通过占位符接收参数-id"><a href="#②-将参数拼接在url中，后台通过占位符接收参数-id" class="headerlink" title="② 将参数拼接在url中，后台通过占位符接收参数  &#x2F;{id}"></a><strong>② 将参数拼接在url中，后台通过占位符接收参数  &#x2F;{id}</strong></h4><p><strong>前端传递参数直接将参数拼在url中，如 &#x2F;addressBook&#x2F;1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">initData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">addressFindOneApi</span>(params.<span class="property">id</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressFindOneApi</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">`/addressBook/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端接收参数</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/addressBook/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">backList</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//- @PathVariable:需要接收前端传递的参数必须要加上这个注解</span></span><br><span class="line"><span class="comment">//- @PathVariable(name=&quot;&quot;)和@PathVariable(value=&quot;&quot;)都可以</span></span><br><span class="line"><span class="comment">//- 可以@RequestMapping或@GetMapping。如果用@RequestMapping就应写为：@RequestMapping(value = &quot;getApplyInfo/&#123;id&#125;&quot;, method= RequestMethod.GET )</span></span><br></pre></td></tr></table></figure><h4 id="③-通过post提交方式将form表单中的数据序列化后传递到后台。"><a href="#③-通过post提交方式将form表单中的数据序列化后传递到后台。" class="headerlink" title="③ 通过post提交方式将form表单中的数据序列化后传递到后台。"></a><strong>③ 通过post提交方式将form表单中的数据序列化后传递到后台。</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">initData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> res =<span class="keyword">await</span> <span class="title function_">formAjax</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formAjax</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/login&quot;</span>,  </span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>, </span><br><span class="line">        <span class="attr">data</span>: $(<span class="string">&quot;#form&quot;</span>).<span class="title function_">serialize</span>(),  <span class="comment">// 对id为form的表单数据进行序列化并传递到后台</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后端接收参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">//form表单的数据与User实体类的数据相对应</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span> <span class="params">(User user)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="④-通过post提交方式将form表单的类型是-json"><a href="#④-通过post提交方式将form表单的类型是-json" class="headerlink" title="④ 通过post提交方式将form表单的类型是 json**"></a>④ 通过post提交方式将form表单的类型是 json**</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">initData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> res =<span class="keyword">await</span> <span class="title function_">formAjax</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formAjax</span>(<span class="params"></span>) &#123;</span><br><span class="line">     $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">       <span class="attr">url</span>: <span class="string">&quot;/login&quot;</span>, </span><br><span class="line">       <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>, </span><br><span class="line">       <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后端接收参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">//form表单的数据与User实体类的数据相对应</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span> <span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="⑤-前台将普通数据转换为json"><a href="#⑤-前台将普通数据转换为json" class="headerlink" title="⑤ 前台将普通数据转换为json**"></a>⑤ 前台将普通数据转换为json**</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">initData</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="attr">paging</span>: &#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">5</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">orderPagingApi</span>(<span class="variable language_">this</span>.<span class="property">paging</span>) </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">orderPagingApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/order/userPage&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>, </span><br><span class="line">         <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后台接收参数 map或对应实体</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/order/userPage&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">userPage</span><span class="params">(<span class="meta">@RequesBody</span> Map&lt;Integer,Integer&gt; map)</span>&#123;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">page</span> <span class="operator">=</span> map.get(<span class="string">&quot;page&quot;</span>);        </span><br><span class="line">      <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> map.get(<span class="string">&quot;pageSize&quot;</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑥-接收参数出错案例"><a href="#⑥-接收参数出错案例" class="headerlink" title="⑥ 接收参数出错案例"></a>⑥ 接收参数出错案例</h4><p>Cannot deserialize instance of <code>java.lang.String</code> out of START_OBJECT token</p><p>请求体中的 user 被认为是一个Object对象，不能用String进行解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改前</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/regiest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; map)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/regiest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,Object&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑦-前端传参-params-params-后端用-RequestParams-“id”-接参"><a href="#⑦-前端传参-params-params-后端用-RequestParams-“id”-接参" class="headerlink" title="⑦ 前端传参 {params: params} ,后端用 @RequestParams(“id”) 接参**"></a>⑦ 前端传参 {params: params} ,后端用 @RequestParams(“id”) 接参**</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端发送数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$axios</span></span><br><span class="line">       .<span class="title function_">delete</span>(<span class="string">&quot;login/deleteUserInfo&quot;</span>, </span><br><span class="line">        &#123; </span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">               <span class="attr">userId</span>: <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">          &#125; </span><br><span class="line">&#125;)</span><br><span class="line">       .<span class="title function_">then</span>(</span><br><span class="line">         <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">         <span class="attr">message</span>: <span class="string">&quot;删除用户信息成功&quot;</span>,</span><br><span class="line">      &#125;))</span><br><span class="line">       .<span class="title function_">catch</span>(</span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;删除用户信息失败&quot;</span>,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后端接收数据</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;deleteUserInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">deleteUserInfo</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> String userId)</span>&#123;</span><br><span class="line">    <span class="type">int</span> result=userInfoService.deleteUserInfoById(userId);</span><br><span class="line">    <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑧-前端通过-data-param-传参，后端通过-RequestBody-接参"><a href="#⑧-前端通过-data-param-传参，后端通过-RequestBody-接参" class="headerlink" title="⑧ 前端通过 {data : param} 传参，后端通过** @RequestBody 接参"></a>⑧ 前端通过 {data : param} 传参，后端通过** <strong>@RequestBody 接参</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端</span></span><br><span class="line"><span class="title function_">deleteMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  axios.<span class="title function_">delete</span>(<span class="string">&#x27;login/deleteUserInfo&#x27;</span>, </span><br><span class="line">               &#123; data : &#123;</span><br><span class="line">                   <span class="attr">userId</span>: <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">                &#125;&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后端</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;deleteUserInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">deleteUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> String userId)</span>&#123;</span><br><span class="line">    <span class="type">int</span> result=userInfoService.deleteUserInfoById(userId);</span><br><span class="line">    <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑨-el-select-数据回显问题"><a href="#⑨-el-select-数据回显问题" class="headerlink" title="⑨ el-select 数据回显问题"></a>⑨ el-select 数据回显问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- :value=&#x27;1&#x27; v-model=&quot;1&quot;（数值 1）则匹配(number=number string=string类型要一致),显示label,否则显示value--&gt;</span><br><span class="line">&lt;el-form-item label=&quot;角色名称：&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">&lt;el-select</span><br><span class="line">        placeholder=&quot;请选择角色名称&quot;</span><br><span class="line">        v-model=&quot;form.roleId&quot;</span><br><span class="line">        :label-width=&quot;formLabelWidth&quot;</span><br><span class="line">        style=&quot;width: 200px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">&lt;el-option</span><br><span class="line">            v-for=&quot;item in roleInfo&quot;</span><br><span class="line">            :key=&quot;item.value&quot;</span><br><span class="line">            :label=&quot;item.roleName&quot;</span><br><span class="line">            :value=&quot;item.roleId&quot;</span><br><span class="line">&gt;            </span><br><span class="line">&lt;/el-option&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><h2 id="hutool"><a href="#hutool" class="headerlink" title="hutool"></a>hutool</h2><h3 id="ObjectUtil的-isNull和-isEmpty"><a href="#ObjectUtil的-isNull和-isEmpty" class="headerlink" title="ObjectUtil的 isNull和 isEmpty"></a>ObjectUtil的 isNull和 isEmpty</h3><p><code>isNull(Object obj)</code>方法：</p><ul><li>该方法用于判断对象是否为 <code>null</code>。</li><li>如果传入的对象 <code>obj</code> 是 <code>null</code> 或者等于 <code>null</code>（通过调用 <code>equals</code> 方法进行判断），则返回 <code>true</code>，否则返回 <code>false</code>。</li><li>这个方法只关注对象是否为 <code>null</code>，不考虑对象的具体内容。</li></ul><p><code>isEmpty(Object obj)</code>方法：</p><ul><li>该方法用于判断对象是否为空。</li><li>如果传入的对象 <code>obj</code> 是 <code>null</code>，则返回 <code>true</code>。</li><li>如果传入的对象是 <code>CharSequence</code>（如字符串）、<code>Map</code>（如Map集合）、<code>Iterable</code>（如List、Set等可迭代对象）或<code>Iterator</code>（迭代器），则会调用对应的工具类方法来判断对象是否为空。比如，如果是字符串类型，则使用 <code>StrUtil.isEmpty</code> 方法来判断字符串是否为空。</li><li>如果传入的对象是数组类型，则使用 <code>ArrayUtil.isEmpty</code> 方法来判断数组是否为空。</li><li>如果传入的对象不属于上述类型，那么返回 <code>false</code>，表示对象不为空。</li></ul><p><strong>总结</strong>：<strong>isEmpty() <strong>方法会针对不同类型的对象调用相应的工具类方法来判断对象是否为空；</strong>isNull()</strong> 方法只关注对象是否为 null</p><h2 id="Java正则"><a href="#Java正则" class="headerlink" title="Java正则"></a>Java正则</h2><ol><li><p>匹配：使用<code>matches()</code>方法来判断一个字符串是否与正则表达式匹配。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a*b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;aab&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isMatch</span> <span class="operator">=</span> input.matches(regex);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>搜索与替换：使用<code>Pattern</code>和<code>Matcher</code>类来进行搜索和替换操作。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\bcat\\b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;I have a cat and a dog.&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(input);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> matcher.find(); <span class="comment">// 搜索匹配项  true</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replacedInput</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;dog&quot;</span>); <span class="comment">// 替换匹配项 I have a dog and a dog.</span></span><br></pre></td></tr></table></figure></li><li><p>分割字符串：使用<code>split()</code>方法来根据正则表达式将字符串分割成数组。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\s+&quot;</span>; <span class="comment">// 表示一个或多个空格字符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;Hello     World&quot;</span>;</span><br><span class="line">String[] parts = input.split(regex); <span class="comment">//[&quot;Hello&quot;,&quot;World&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p>提取内容：使用分组（Grouping）来提取正则表达式中的特定部分。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)&quot;</span>; <span class="comment">// 匹配日期格式（YYYY-MM-DD）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;Today is 2021-09-30&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(input);</span><br><span class="line"><span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>); <span class="comment">// &quot;2021&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>); <span class="comment">// &quot;09&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> matcher.group(<span class="number">3</span>); <span class="comment">// &quot;30&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> matcher,group();<span class="comment">// &quot;2021-09-30&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java中的反斜杠 <code>\</code> 在字符串中需要进行转义，因此正则表达式中的反斜杠需要使用两个反斜杠 <code>\\</code> 进行表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*:匹配前一个元素零次或多次。</span><br><span class="line">.:匹配任意单个字符（除了换行符 \n）。</span><br><span class="line">+:匹配前一个元素一次或多次。</span><br><span class="line">?:匹配前一个元素零次或一次。</span><br><span class="line">\b:当它是由单词边界包围时才进行匹配 如上例</span><br><span class="line">\s:用于匹配任意连续的空白字符。包括空格、制表符和换行符</span><br><span class="line">\d*:匹配任意数量的数字字符（<span class="number">0</span> 次或多次）。</span><br><span class="line">\.:匹配实际的点号字符。</span><br><span class="line">\d+:匹配至少一个数字字符。</span><br><span class="line">\?:匹配实际的问号字符。</span><br></pre></td></tr></table></figure></li></ol><h2 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h2><p><a href="https://jsoup.org/">Jsoup官方文档</a></p><h3 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h3><ul><li><p><code>Jsoup.parse(String html)</code>: 将HTML字符串解析成一个Document对象。</p></li><li><p><code>Jsoup.parse(File in, String charsetName)</code>: 从文件中解析HTML文档。</p></li><li><p><code>Jsoup.parse(URL url, int timeoutMillis)</code>: 从URL中解析HTML文档。</p><p>遍历和选择元素：</p></li><li><p><code>getElementsByTag(String tagName)</code>: 选择指定标签名的元素，返回一个Elements对象。</p></li><li><p><code>getElementById(String id)</code>: 选择具有指定id属性的元素，返回一个Element对象。</p></li><li><p><code>getElementsByClass(String className)</code>: 选择具有指定CSS类名的元素，返回一个Elements对象。</p></li><li><p><code>Document.select(String cssQuery)</code>: 使用CSS选择器选择元素，返回一个Elements对象。</p></li><li><p><code>Element.select(String cssQuery)</code>: 在当前元素的子元素中使用CSS选择器选择元素，返回一个Elements对象。</p></li><li><p><code>Elements.first()</code>: 返回Elements集合中的第一个元素。</p></li><li><p><code>Elements.last()</code>: 返回Elements集合中的最后一个元素。</p></li><li><p><code>Elements.get(int index)</code>: 返回Elements集合中指定索引位置的元素。</p></li><li><p><code>Elements.hasAttr(String attributeKey)</code>: 选择具有指定属性的元素。</p></li><li><p><code>Elements.not(String cssQuery)</code>: 排除符合指定选择器的元素。</p></li><li><p><code>Element.traverse(NodeVisitor nodeVisitor)</code>: 使用自定义的NodeVisitor遍历元素及其子元素。</p></li><li><p><code>Element.wrap(String html)</code>: 将元素用指定的HTML包装起来。</p></li><li><p><code>Element.unwrap()</code>: 移除元素的父元素，保留元素本身。</p></li></ul><h3 id="过滤元素"><a href="#过滤元素" class="headerlink" title="过滤元素"></a>过滤元素</h3><ul><li><code>Elements.filter(NodeFilter nodeFilter)</code>: 使用自定义的NodeFilter过滤元素。</li></ul><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><ul><li><code>Element.tagName()</code>: 获取元素的标签名。</li><li><code>Element.text()</code>: 获取元素的文本内容。</li><li><code>Element.html()</code>: 获取元素的HTML内容。</li><li><code>Element.attr(String attributeKey)</code>: 获取元素指定属性的值。</li><li><code>Element.attr(String attributeKey, String attributeValue)</code>: 设置元素指定属性的值。</li><li><code>Element.append(String html)</code>: 在元素的末尾添加HTML内容。</li><li><code>Element.prepend(String html)</code>: 在元素的开头添加HTML内容。</li><li><code>Element.after(String html)</code>: 在元素之后插入HTML内容。</li><li><code>Element.before(String html)</code>: 在元素之前插入HTML内容。</li><li><code>Element.remove()</code>: 移除元素。</li></ul><h3 id="提取和修改HTML文档结构"><a href="#提取和修改HTML文档结构" class="headerlink" title="提取和修改HTML文档结构"></a>提取和修改HTML文档结构</h3><ul><li><code>Document.body()</code>: 获取HTML文档的<code>&lt;body&gt;</code>元素。</li><li><code>Element.parent()</code>: 获取元素的父元素。</li><li><code>Element.children()</code>: 获取元素的直接子元素。</li><li><code>Element.clone()</code>: 克隆元素及其子元素。</li><li><code>Element.replaceWith(Node replacement)</code>: 用指定的节点替换元素。</li><li><code>Element.replaceWith(String html)</code>: 用指定的HTML内容替换元素。</li></ul><h3 id="操作CSS类"><a href="#操作CSS类" class="headerlink" title="操作CSS类"></a>操作CSS类</h3><ul><li><code>Element.hasClass(String className)</code>: 检查元素是否具有指定的CSS类。</li><li><code>Element.addClass(String className)</code>: 为元素添加CSS类。</li><li><code>Element.removeClass(String className)</code>: 从元素中移除指定的CSS类。</li></ul><h3 id="处理表单数据"><a href="#处理表单数据" class="headerlink" title="处理表单数据"></a>处理表单数据</h3><ul><li><code>FormElement.formData()</code>: 获取表单元素中的所有表单数据。</li></ul><h3 id="获取和设置表单数据"><a href="#获取和设置表单数据" class="headerlink" title="获取和设置表单数据"></a>获取和设置表单数据</h3><ul><li><code>Element.val()</code>: 获取或设置元素的值。</li><li><code>Element.val(String value)</code>: 设置元素的值。</li></ul><h3 id="处理相对和绝对URL"><a href="#处理相对和绝对URL" class="headerlink" title="处理相对和绝对URL"></a>处理相对和绝对URL</h3><ul><li><code>Element.absUrl(String attributeKey)</code>: 获取元素指定属性的绝对URL。</li></ul><h3 id="处理特殊字符和编码"><a href="#处理特殊字符和编码" class="headerlink" title="处理特殊字符和编码"></a>处理特殊字符和编码</h3><ul><li><code>Entities.escape(String string)</code>: 对HTML文本进行转义。</li><li><code>Entities.unescape(String string)</code>: 解码HTML文本中的特殊字符。</li></ul><h2 id="Java数据脱敏"><a href="#Java数据脱敏" class="headerlink" title="Java数据脱敏"></a>Java数据脱敏</h2><h3 id="①-SQL数据脱敏实现"><a href="#①-SQL数据脱敏实现" class="headerlink" title="① SQL数据脱敏实现"></a>① SQL数据脱敏实现</h3><p><a href="https://www.jb51.net/article/213589.htm">MYSQL(电话号码,身份证)数据脱敏的实现</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CONCAT()、LEFT()和RIGHT()字符串函数组合使用，请看下面具体实现</span></span><br><span class="line"><span class="comment">-- CONCAT(str1,str2,…)：返回结果为连接参数产生的字符串</span></span><br><span class="line"><span class="comment">-- LEFT(str,len)：返回从字符串str 开始的len 最左字符</span></span><br><span class="line"><span class="comment">-- RIGHT(str,len)：从字符串str 开始，返回最右len 字符</span></span><br><span class="line"><span class="comment">-- 电话号码脱敏sql：</span></span><br><span class="line"><span class="keyword">SELECT</span> mobilePhone <span class="keyword">AS</span> 脱敏前电话号码,CONCAT(<span class="keyword">LEFT</span>(mobilePhone,<span class="number">3</span>), <span class="string">&#x27;********&#x27;</span> ) <span class="keyword">AS</span> 脱敏后电话号码 <span class="keyword">FROM</span> t_s_user</span><br><span class="line"><span class="comment">-- 身份证号码脱敏sql:</span></span><br><span class="line"><span class="keyword">SELECT</span> idcard <span class="keyword">AS</span> 未脱敏身份证, CONCAT(<span class="keyword">LEFT</span>(idcard,<span class="number">3</span>), <span class="string">&#x27;****&#x27;</span> ,<span class="keyword">RIGHT</span>(idcard,<span class="number">4</span>)) <span class="keyword">AS</span> 脱敏后身份证号 <span class="keyword">FROM</span> t_s_user</span><br></pre></td></tr></table></figure><h3 id="②-JAVA数据脱敏"><a href="#②-JAVA数据脱敏" class="headerlink" title="② JAVA数据脱敏"></a>② JAVA数据脱敏</h3><p>可参考：<a href="https://gitee.com/strong_sea/sensitive-plus?_from=gitee_search">海强 &#x2F; sensitive-plus</a></p><p>数据脱敏插件，目前支持地址脱敏、银行卡号脱敏、中文姓名脱敏、固话脱敏、身份证号脱敏、手机号脱敏、密码脱敏 一个是正则脱敏、另外一个根据显示长度脱敏，默认是正则脱敏，可以根据自己的需要配置自己的规则。</p><h3 id="③-mybatis-mate-sensitive-jackson"><a href="#③-mybatis-mate-sensitive-jackson" class="headerlink" title="③ mybatis-mate-sensitive-jackson"></a>③ mybatis-mate-sensitive-jackson</h3><p><a href="https://gitee.com/baomidou/mybatis-mate-examples/tree/master/mybatis-mate-sensitive-jackson">mybatis-mate-sensitive-jackson</a></p><p>根据定义的策略类型，对数据进行脱敏，当然策略可以自定义。</p><h2 id="BeanUtils-copyProperties"><a href="#BeanUtils-copyProperties" class="headerlink" title="BeanUtils.copyProperties"></a>BeanUtils.copyProperties</h2><p>我们日常开发中，经常涉及到<code>DO、DTO、VO</code>对象属性拷贝赋值，很容易想到<code>org.springframework.beans.BeanUtils</code>的<code>copyProperties </code>。它会自动通过反射机制获取源对象和目标对象的属性，<strong>并将对应的属性值进行复制</strong>。可以减少手动编写属性复制代码的工作量，提高代码的可读性和维护性。</p><p><img src="https://gitee.com/cxz206015/images/raw/master/assets/640.png" alt="图片"></p><h3 id="第1个坑：类型不匹配"><a href="#第1个坑：类型不匹配" class="headerlink" title="第1个坑：类型不匹配"></a>第1个坑：类型不匹配</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Data  </span><br><span class="line">public class SourceBean &#123;  </span><br><span class="line">    private Long age;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">@Data  </span><br><span class="line">public class TargetBean &#123;  </span><br><span class="line">    private String age;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">public class Test &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        SourceBean source = new SourceBean();  </span><br><span class="line">        source.setAge(25L);  </span><br><span class="line">  </span><br><span class="line">        TargetBean target = new TargetBean();  </span><br><span class="line">        BeanUtils.copyProperties(source, target);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(target.getAge());  //拷贝赋值失败，输出null  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>在上述<code>demo</code>中，源对象<code>SourceBean</code>的<code>age</code>属性是一个<code>Long</code>类型，而目标对象<code>TargetBean</code>的<code>age</code>属性是一个<code>String</code>类型。由于类型不匹配，<code>BeanUtils.copyProperties</code>不会赋值成功的。我跑<code>demo</code>的结果，控制台输出<code>null</code>。</p><h3 id="第2个坑-BeanUtils-copyProperties是浅拷贝"><a href="#第2个坑-BeanUtils-copyProperties是浅拷贝" class="headerlink" title="第2个坑: BeanUtils.copyProperties是浅拷贝"></a>第2个坑: BeanUtils.copyProperties是浅拷贝</h3><p>先给大家复习一下，什么是深拷贝？什么是浅拷贝？</p><ul><li>浅拷贝是指创建一个新对象，该对象的属性值与原始对象相同，但对于引用类型的属性，仍然共享相同的引用。换句话说，浅拷贝只复制对象及其引用，而不复制引用指向的对象本身。</li><li>深拷贝是指创建一个新对象，该对象的属性值与原始对象相同，包括引用类型的属性。深拷贝会递归复制引用对象，创建全新的对象，<strong>以确保拷贝后的对象与原始对象完全独立</strong>。</li></ul><p><img src="https://gitee.com/cxz206015/images/raw/master/assets/641.png" alt="图片"></p><p>我再给个代码<code>demo</code>给大家看看哈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String city;  </span><br><span class="line">    <span class="comment">//getter 和 setter 方法省略  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Address address;  </span><br><span class="line">    <span class="comment">//getter 和 setter 方法省略  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"> <span class="type">Person</span> <span class="variable">sourcePerson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line"> sourcePerson.setName(<span class="string">&quot;John&quot;</span>);  </span><br><span class="line"> <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();  </span><br><span class="line"> address.setCity(<span class="string">&quot;New York&quot;</span>);  </span><br><span class="line"> sourcePerson.setAddress(address);  </span><br><span class="line">  </span><br><span class="line"> <span class="type">Person</span> <span class="variable">targetPerson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line"> BeanUtils.copyProperties(sourcePerson, targetPerson);  </span><br><span class="line">  </span><br><span class="line"> sourcePerson.getAddress().setCity(<span class="string">&quot;London&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"> System.out.println(targetPerson.getAddress().getCity());  <span class="comment">// 输出为 &quot;London&quot;  </span></span><br></pre></td></tr></table></figure><p>在上述示例中，源对象<code>Person</code>的属性<code>address</code>是一个引用类型。当使用<code>BeanUtils.copyProperties</code>方法进行属性复制时，实际上只复制了引用，即目标对象<code>targetPerson</code>的 <code>address</code> 属性引用和源对象 <code>sourcePerson</code> 的 <code>address</code> 属性引用指向同一个对象。因此，当修改源对象的<code>address</code>对象时，目标对象的<code>address</code>对象也会被修改。</p><p>大家日常开发中，要注意这个坑哈~</p><h3 id="第3个坑：属性名称不一致"><a href="#第3个坑：属性名称不一致" class="headerlink" title="第3个坑：属性名称不一致"></a>第3个坑：属性名称不一致</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String username;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// getter 和 setter 方法省略  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String userName;  </span><br><span class="line">    <span class="comment">// getter 和 setter 方法省略  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"> <span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line"> source.setUsername(<span class="string">&quot;捡田螺的小男孩&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"> <span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line"> BeanUtils.copyProperties(source, target);  </span><br><span class="line">  </span><br><span class="line"> System.out.println(target.getUserName());   <span class="comment">// 输出为 null  </span></span><br></pre></td></tr></table></figure><p>在上述示例中，源对象<code>SourceBean</code> 的属性名称是<code>username</code>，而目标对象<code>TargetBean</code>的属性名称也是<code>userName</code>。<strong>但是</strong>，两个 <code>username</code>，一个N是大写，一个n是小写，即<strong>属性名称不一致</strong>，<code>BeanUtils.copyProperties</code>方法无法自动映射这些属性（无法忽略大小写自动匹配），因此目标对象的<code>userName</code>属性值为<code>null</code>。</p><p>大家日常开发中，要注意这个坑哈~ <strong>比如大小写不一致，差一两个字母等等</strong>。</p><h3 id="第4个坑：Null-值覆盖"><a href="#第4个坑：Null-值覆盖" class="headerlink" title="第4个坑：Null 值覆盖"></a>第4个坑：Null 值覆盖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String address;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String address;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">source.setName(<span class="string">&quot;John&quot;</span>);  </span><br><span class="line">source.setAddress(<span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">target.setAddress(<span class="string">&quot;田螺address&quot;</span>);  </span><br><span class="line">BeanUtils.copyProperties(source, target);  </span><br><span class="line">  </span><br><span class="line">System.out.println(target.getAddress());  <span class="comment">// 输出为 null  </span></span><br></pre></td></tr></table></figure><p>在上述示例中，源对象 <code>SourceBean </code>的 address 属性值为 null。默认情况下，<code>BeanUtils.copyProperties</code> 方法会将源对象中的 null 值属性覆盖到目标对象中。因此，目标对象的 address 属性值也为 null。</p><p>如果你不希望 null 值覆盖目标对象中的属性，可以使用 <code>BeanUtils.copyProperties</code> 方法的重载方法，并传入一个自定义的 <code>ConvertUtilsBean</code> 实例来进行配置。</p><h3 id="第5个坑：注意引入的包"><a href="#第5个坑：注意引入的包" class="headerlink" title="第5个坑：注意引入的包"></a>第5个坑：注意引入的包</h3><p><code>BeanUtils.copyProperties</code>其实有两个包，分别是<code>spring、apache</code>。大家注意一下哈，这两个包，是有点不一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.beans.BeanUtils(源对象在左边，目标对象在右边)  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyProperties</span><span class="params">(Object source, Object target)</span> <span class="keyword">throws</span> BeansException   </span><br><span class="line"><span class="comment">//org.apache.commons.beanutils.BeanUtils（源对象在右边，目标对象在左边）  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyProperties</span><span class="params">(Object dest, Object orig)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException  </span><br></pre></td></tr></table></figure><p>大家使用的时候，要注意一下哈，注意自己引入的哪个<code>BeanUtils</code>，写对应参数位置。</p><h3 id="第6个坑：Boolean类型数据-is属性开头的坑"><a href="#第6个坑：Boolean类型数据-is属性开头的坑" class="headerlink" title="第6个坑：Boolean类型数据+is属性开头的坑"></a>第6个坑：Boolean类型数据+is属性开头的坑</h3><p>把<code>SourceBean和TargetBean</code>中的都有个属性<code>isTianLuo</code>,它们的数据类型保持不变,但是一个为基本类型<code>boolean</code>，一个为包装类型<code>Boolean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isTianLuo;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Boolean isTianLuo;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>跑测试用里的时候，发现赋值不上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">source.setTianLuo(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">BeanUtils.copyProperties(source, target);  </span><br><span class="line">System.out.println(target.getIsTianLuo()); <span class="comment">// 输出为 null  </span></span><br></pre></td></tr></table></figure><blockquote><p>这是因为当属性类型为<code>boolean</code>时，属性名以<code>is</code>开头,属性名会去掉前面的<code>is</code>，因此源对象和目标对象属性对不上啦。</p></blockquote><p>大家使用<code>BeanUtils.copyProperties</code>过程中，要注意哈~</p><h3 id="第7个坑：查找不到字段引用"><a href="#第7个坑：查找不到字段引用" class="headerlink" title="第7个坑：查找不到字段引用"></a>第7个坑：查找不到字段引用</h3><p>在某些开发场景呢，如果我们要修改某个字段的赋值，我们可能会全文搜索它的所有<code>set</code>方法，看哪些地方引用到。</p><p><img src="https://gitee.com/cxz206015/images/raw/master/assets/644.png" alt="图片"></p><p>但是呢，如果使用<code>BeanUtils.copyProperties</code>，<strong>就不知道是否引用到对应的ste方法啦</strong>，<strong>即查找不到字段引用</strong>。这就可能导致你会漏掉修改对应的字段。</p><p><img src="https://gitee.com/cxz206015/images/raw/master/assets/643.png" alt="图片"></p><h3 id="第8个坑：不同内部类，即使相同属性，也是赋值失败"><a href="#第8个坑：不同内部类，即使相同属性，也是赋值失败" class="headerlink" title="第8个坑：不同内部类，即使相同属性，也是赋值失败"></a>第8个坑：不同内部类，即使相同属性，也是赋值失败</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopySource</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String outerName;  </span><br><span class="line">    <span class="keyword">public</span> CopySource.InnerClass innerClass;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Data</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> String InnerName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyTarget</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> String outerName;  </span><br><span class="line">    <span class="keyword">public</span> CopyTarget.InnerClass innerClass;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Data</span>  </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> String InnerName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">CopySource</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopySource</span>();  </span><br><span class="line">test1.outerName = <span class="string">&quot;outTianluo&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">CopySource.<span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopySource</span>.InnerClass();  </span><br><span class="line">innerClass.InnerName = <span class="string">&quot;innerTianLuo&quot;</span>;  </span><br><span class="line">test1.innerClass = innerClass;  </span><br><span class="line">  </span><br><span class="line">System.out.println(test1);  </span><br><span class="line"><span class="type">CopyTarget</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyTarget</span>();  </span><br><span class="line">BeanUtils.copyProperties(test1, test2);  </span><br><span class="line">  </span><br><span class="line">System.out.println(test2);  <span class="comment">//输出CopyTarget(outerName=outTianluo, innerClass=null)  </span></span><br></pre></td></tr></table></figure><p>以上<code>demo</code>中，<code>CopySource</code>和<code>CopyTarget</code>各自存在一个内部类<code>InnerClass</code>，虽然这个内部类属性也相同，类名也相同，但是在不同的类中，因此<code>Spring</code>会认为属性不同,不会<code>Copy</code>;</p><p>如果要复制成功，可以让他们指向同一个内部类。</p><h3 id="第9个坑：bean对应的属性，没有getter和setter方法，赋值失败"><a href="#第9个坑：bean对应的属性，没有getter和setter方法，赋值失败" class="headerlink" title="第9个坑：bean对应的属性，没有getter和setter方法，赋值失败"></a>第9个坑：bean对应的属性，没有getter和setter方法，赋值失败</h3><p><code>BeanUtils.copyProperties</code>要拷贝属性值成功，需要对应的<code>bean</code>要有<code>getter和setter</code>方法。因为它是用反射拿到set和get方法再去拿属性值和设置属性值的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Getter</span>   <span class="comment">//没有对应的setter方法  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">source.setValue(<span class="string">&quot;捡田螺的小男孩&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">BeanUtils.copyProperties(source, target);  </span><br><span class="line">System.out.println(target.getValue()); <span class="comment">//输出null   </span></span><br></pre></td></tr></table></figure><h3 id="第10个坑：BeanUtils-copyProperties-泛型"><a href="#第10个坑：BeanUtils-copyProperties-泛型" class="headerlink" title="第10个坑：BeanUtils.copyProperties + 泛型"></a>第10个坑：BeanUtils.copyProperties + 泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopySource</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String outerName;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;CopySource.InnerClass&gt; clazz;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Data</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> String InnerName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@ToString</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyTarget</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> String outerName;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;CopyTarget.InnerClass&gt; clazz;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Data</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> String InnerName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">CopySource</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopySource</span>();  </span><br><span class="line">test1.outerName = <span class="string">&quot;outTianluo&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">CopySource.<span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopySource</span>.InnerClass();  </span><br><span class="line">innerClass.InnerName = <span class="string">&quot;innerTianLuo&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">List&lt;CopySource.InnerClass&gt; clazz = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">clazz.add(innerClass);  </span><br><span class="line">test1.setClazz(clazz);  </span><br><span class="line">  </span><br><span class="line">System.out.println(test1);  </span><br><span class="line"><span class="type">CopyTarget</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyTarget</span>();  </span><br><span class="line">BeanUtils.copyProperties(test1, test2);  </span><br><span class="line">  </span><br><span class="line">System.out.println(test2);  <span class="comment">//输出CopyTarget(outerName=outTianluo, clazz=null)  </span></span><br></pre></td></tr></table></figure><p>这里面的例子，<code>BeanUtils.copyProperties</code>方法拷贝包含泛型属性的对象<code>clazz</code>。<code>CopyTarget</code>和<code>CopySource</code>的泛型属性类型不匹配，因此拷贝赋值失败。</p><h3 id="第11个坑：性能问题"><a href="#第11个坑：性能问题" class="headerlink" title="第11个坑：性能问题"></a>第11个坑：性能问题</h3><p>由于这些<code>BeanUtils</code>类都是采用反射机制实现的，对程序的效率也会有影响。我跑了个<code>demo</code>对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SourceBean</span> <span class="variable">sourceBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">sourceBean.setName(<span class="string">&quot;tianLuoBoy&quot;</span>);  </span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;  <span class="comment">//循环10万次  </span></span><br><span class="line">      target.setName(sourceBean.getName());  </span><br><span class="line">&#125;  </span><br><span class="line">System.out.println(<span class="string">&quot;common setter time:&quot;</span> + (System.currentTimeMillis() - beginTime));  </span><br><span class="line">  </span><br><span class="line"><span class="type">long</span> <span class="variable">beginTime1</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;  <span class="comment">//循环10万次  </span></span><br><span class="line">    BeanUtils.copyProperties(sourceBean, target);  </span><br><span class="line">&#125;  </span><br><span class="line">System.out.println(<span class="string">&quot;bean copy time:&quot;</span> + (System.currentTimeMillis() - beginTime1));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//输出  </span></span><br><span class="line">common setter time:<span class="number">3</span>  </span><br><span class="line">bean copy time:<span class="number">331</span>  </span><br></pre></td></tr></table></figure><p>可以发现，简单的<code>setter</code>和<code>BeanUtils.copyProperties</code>对比，性能差距非常大。因此，慎用<code>BeanUtils.copyProperties！！！</code></p><h3 id="12-替换BeanUtils-copyProperties的方案"><a href="#12-替换BeanUtils-copyProperties的方案" class="headerlink" title="12. 替换BeanUtils.copyProperties的方案"></a>12. 替换BeanUtils.copyProperties的方案</h3><p><strong>第一种</strong>，那就是使用原始的<code>setter和getter</code>方法。</p><blockquote><p>使用手动的setter方法进行属性赋值。这种方法可能需要编写更多的代码，但是可以提供更细粒度的控制，并且在性能方面通常比BeanUtils.copyProperties更高效。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();  </span><br><span class="line">target.setName(source.getName());  </span><br><span class="line">target.setAge(source.getAge());  </span><br></pre></td></tr></table></figure><p>如果实在对象<code>bean</code>的属性比较多的话，可以使用插件<code>GenerateAllSetter</code>，它可以一键生成对象的<code>set</code>方法，挺方便的。</p><p><strong>第二种方案</strong>，使用映射工具库，如<code>MapStruct、ModelMapper</code>等，它们可以自动生成属性映射的代码。这些工具库可以减少手动编写setter方法的工作量，并提供更好的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SourceTargetMapper</span> &#123;  </span><br><span class="line">    <span class="type">SourceTargetMapper</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SourceTargetMapper.class);  </span><br><span class="line">    <span class="meta">@Mapping(source = &quot;name&quot;, target = &quot;name&quot;)</span>  </span><br><span class="line">    <span class="meta">@Mapping(source = &quot;age&quot;, target = &quot;age&quot;)</span>  </span><br><span class="line">    Target <span class="title function_">mapToTarget</span><span class="params">(Source source)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> SourceTargetMapper.INSTANCE.mapToTarget(source);</span><br></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志框架和日志门面"><a href="#日志框架和日志门面" class="headerlink" title="日志框架和日志门面"></a>日志框架和日志门面</h3><h4 id="①-常见的日志框架"><a href="#①-常见的日志框架" class="headerlink" title="① 常见的日志框架"></a>① 常见的日志框架</h4><p><strong>Log4j</strong>：Apache Log4j 是一个广泛使用的日志框架，它提供了丰富的配置选项和多种输出目标。</p><p><strong>Log4j2</strong>: Apache Log4j 2 是 Apache Software Foundation 开发的日志框架，它是 Log4j 的升级版本，提供了更好的性能和功能。</p><p><strong>Logback</strong>：Logback 是由 Log4j 的创始人设计的日志框架，旨在取代 Log4j。它在性能和灵活性方面表现出色。</p><p><strong>JUL</strong>： (Java Util Logging) JUL 是 Java 平台自带的日志框架，位于<code>java.util.logging</code>包下。它是标准的 Java 日志框架，使用简单，但功能相对较弱。</p><h4 id="②-常见的日志门面"><a href="#②-常见的日志门面" class="headerlink" title="② 常见的日志门面"></a>② 常见的日志门面</h4><p><strong>SLF4J：</strong>常见的日志门面，它提供了统一的日志 API，并允许你在项目中使用 SLF4J 的接口，而不用直接依赖于具体的日志实现。</p><p><strong>ACL：</strong>(Apache Commons Logging)常见的日志门面，类似于 SLF4J，它允许开发者使用通用的 API 来进行日志记录。</p><p><strong>注意</strong>：日志门面是一个抽象层，它提供了一组通用的日志 API，可以将这些 API 与不同的日志框架进行绑定。这样，你可以在项目中使用统一的日志 API，而无需直接和特定的日志框架耦合。根据项目需求和个人喜好，可以选择使用不同的日志门面和底层的日志实现。其中，SLF4J 是目前使用最广泛的日志门面之一，并且很多日志框架都支持与 SLF4J 的集成。</p><h3 id="日志如何使用"><a href="#日志如何使用" class="headerlink" title="日志如何使用"></a>日志如何使用</h3><p>在项目中集成日志门面和日志框架通常是一个简单的过程，主要涉及两个步骤：<strong>引入依赖</strong>和<strong>配置日志框架</strong></p><h4 id="①-引入依赖："><a href="#①-引入依赖：" class="headerlink" title="① 引入依赖："></a>① 引入依赖：</h4><p> 首先，你需要在项目的构建工具（如Maven、Gradle等）中添加对日志门面和具体日志框架的依赖。以 SLF4J 和 Logback 为例，在 Maven 中的依赖配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SLF4J 日志门面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Logback 日志框架 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-配置日志框架："><a href="#②-配置日志框架：" class="headerlink" title="② 配置日志框架："></a>② 配置日志框架：</h4><p> 日志框架的配置方式因框架而异。对于 Logback，你需要创建一个 <code>logback.xml</code>配置文件，并放置在项目的 classpath 路径下（通常是 <code>src/main/resources</code> 目录下）。</p><p>以下是一个简单的 Logback 配置示例，用于将日志输出到控制台：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logback.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述配置定义了一个输出到控制台的 Appender，并将根日志记录器的级别设置为 <code>debug</code>，这意味着会记录所有级别的日志信息。</p><p>一旦你完成了依赖的引入和日志框架的配置，你就可以在项目中使用日志门面的 API（例如 SLF4J 提供的 <code>Logger</code> 接口）来记录日志。根据日志门面的 API 设计，你可以使用不同的日志级别（如 <code>debug</code>、<code>info</code>、<code>warn</code>、<code>error</code> 等）和相应的日志方法来记录不同级别的日志信息。</p><p>例如，在代码中使用 SLF4J 来记录日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyClass.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;This is a debug message.&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;This is an info message.&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;This is a warning message.&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;This is an error message.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当项目运行时，具体的日志输出将由你在配置文件中指定的 Appender 和日志级别来决定。</p><p>总结：在项目中集成日志门面和日志框架，首先引入相应的依赖（日志门面和具体日志框架的实现），然后配置日志框架以指定日志输出的方式和级别。在代码中，你可以使用日志门面的 API 来记录日志。这样，你可以在不改变代码的情况下切换不同的日志框架，以满足项目的日志需求。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>try-with-resource语法</p><h2 id="递归输出文件夹里全部文件名"><a href="#递归输出文件夹里全部文件名" class="headerlink" title="递归输出文件夹里全部文件名"></a>递归输出文件夹里全部文件名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listFilesRecursively</span><span class="params">(File folder)</span> &#123;</span><br><span class="line">    File[] contents = folder.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (contents != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File item : contents) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.isFile()) &#123;</span><br><span class="line">                System.out.println(item.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.isDirectory()) &#123;</span><br><span class="line">                listFilesRecursively(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 替换为你想要遍历的文件夹路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">folderPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\Typora\\touchfish\\9.PDF books&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(folderPath);</span><br><span class="line">    listFilesRecursively(folder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用微信接口"><a href="#调用微信接口" class="headerlink" title="调用微信接口"></a>调用微信接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_ID</span> <span class="operator">=</span> <span class="string">&quot;wx9b8660bec01590c6&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_SECRET</span> <span class="operator">=</span> <span class="string">&quot;41156c80c9d2aaf0f24970a7538316fb&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP_NAME</span> <span class="operator">=</span> <span class="string">&quot;森林之父游戏群&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NEW_GROUP_NAME</span> <span class="operator">=</span> <span class="string">&quot;森林之子游戏群&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取访问凭证</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> getAccessToken();</span><br><span class="line">            <span class="keyword">if</span> (accessToken == <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Failed to get access token.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取微信群列表</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">groupListJson</span> <span class="operator">=</span> getWeChatGroupList(accessToken);</span><br><span class="line">            <span class="keyword">if</span> (groupListJson == <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Failed to get WeChat group list.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据群名称查找群ID</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">groupId</span> <span class="operator">=</span> findGroupIdByGroupName(groupListJson, GROUP_NAME);</span><br><span class="line">            <span class="keyword">if</span> (groupId == <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Target group not found.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 修改群名称</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> updateGroupName(accessToken, groupId, NEW_GROUP_NAME);</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Group name updated successfully.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Failed to update group name.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getAccessToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&quot;</span></span><br><span class="line">                + APP_ID + <span class="string">&quot;&amp;secret=&quot;</span> + APP_SECRET;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解析返回的 JSON 数据，获取访问凭证</span></span><br><span class="line">            <span class="comment">// 这里仅作示例，假设返回的 JSON 数据中有一个字段为 &quot;access_token&quot;</span></span><br><span class="line">            <span class="comment">// 实际情况中，请根据微信返回的 JSON 数据结构来解析访问凭证</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> response.indexOf(<span class="string">&quot;\&quot;access_token\&quot;:\&quot;&quot;</span>) + <span class="number">16</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> response.indexOf(<span class="string">&quot;\&quot;,\&quot;expires_in\&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> response.substring(startIndex, endIndex);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to get access token. Response code: &quot;</span> + connection.getResponseCode());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getWeChatGroupList</span><span class="params">(String accessToken)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/groups/get?access_token=&quot;</span> + accessToken;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> response.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to get WeChat group list. Response code: &quot;</span> + connection.getResponseCode());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">findGroupIdByGroupName</span><span class="params">(String groupListJson, String groupName)</span> &#123;</span><br><span class="line">        <span class="comment">// 解析微信群列表的 JSON 数据，查找目标群的群ID</span></span><br><span class="line">        <span class="comment">// 这里仅作示例，假设返回的 JSON 数据中有一个字段为 &quot;groups&quot;，其中包含群列表</span></span><br><span class="line">        <span class="comment">// 实际情况中，请根据微信返回的 JSON 数据结构来解析群列表和群ID</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">groupId</span> <span class="operator">=</span> <span class="string">&quot;YOUR_GROUP_ID&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> groupId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">updateGroupName</span><span class="params">(String accessToken, String groupId, String newGroupName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/groups/update?access_token=&quot;</span> + accessToken;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建修改群名称的请求体</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestBody</span> <span class="operator">=</span> String.format(<span class="string">&quot;&#123;\&quot;group\&quot;:&#123;\&quot;id\&quot;:%s,\&quot;name\&quot;:\&quot;%s\&quot;&#125;&#125;&quot;</span>,</span><br><span class="line">                groupId, URLEncoder.encode(newGroupName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">        connection.getOutputStream().write(requestBody.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解析返回的 JSON 数据，检查修改是否成功</span></span><br><span class="line">            <span class="comment">// 这里仅作示例，假设返回的 JSON 数据中有一个字段为 &quot;errcode&quot;，为 0 表示修改成功</span></span><br><span class="line">            <span class="comment">// 实际情况中，请根据微信返回的 JSON 数据结构来解析修改结果</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">errCode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (errCode == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Failed to update group name. Error code: &quot;</span> + errCode);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to update group name. Response code: &quot;</span> + connection.getResponseCode());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导出文件"><a href="#导出文件" class="headerlink" title="导出文件"></a>导出文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出到指定路径的docx文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(templatePath + paperName + <span class="string">&quot;.docx&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">FileUtils.del(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出为流文件：</span></span><br><span class="line"><span class="comment">//1.直接返回response的二进制流，这种在response里的流不能携带其他任何信息</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=paper.docx&quot;</span>);</span><br><span class="line"><span class="comment">//2.返回带信息的流,可以封装一个实体包括信息和转为base64格式的二进制流文件</span></span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">//用Base64转换二级制流导出错误数据，用于前端下载</span></span><br><span class="line">ExcelUtil.exportTemplate(errorStudentList,<span class="string">&quot;excel/exportStudentTemplate.xlsx&quot;</span>, os);</span><br><span class="line">    <span class="type">String</span> <span class="variable">encodeToString</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(os.toByteArray());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;导入异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态导出表头"><a href="#动态导出表头" class="headerlink" title="动态导出表头"></a>动态导出表头</h2><p><img src="https://gitee.com/cxz206015/images/raw/master/assets/image-20230918113035142.png" alt="image-20230918113035142"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>这里是耶比大熊的blog，支持 Markdown, HTML</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友人帐</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
