<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vercel部署</title>
      <link href="/2024/04/09/note-vercel/"/>
      <url>/2024/04/09/note-vercel/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="关于-vercel"><a href="#关于-vercel" class="headerlink" title="关于 vercel"></a>关于 vercel</h1><p>Vercel 是一个云服务平台，支持静态网站和动态网站的应用部署、预览和上线。如果你用过 <code>GitHub Pages</code> ，那么心里可能不会太陌生，但你也能通过 vercel 集成 GitHub 后后，在 GitHub 项目进行代码推送，PR合并自动部署的目的，且你不需要考虑服务器问题。</p><p>与其说这是 vercel 可行性调研方案，不如说是 vercel 用法普及，因为 vercel 自身内置 CI CD，只要你将项目与 vercel 关联，你就能通过命令快速部署，这没什么难度，接下来给大家讲解 vercel 优势、部署方式、能力边界以及接下来工作可能要思考的点。</p><h1 id="Vercel-优势（能带来什么）"><a href="#Vercel-优势（能带来什么）" class="headerlink" title="Vercel 优势（能带来什么）"></a>Vercel 优势（能带来什么）</h1><p>使用 vercel 能为我们带来什么？关于 vercel 能力优势，这里我根据我个人使用体验简单罗列：</p><ul><li>个人版永久免费，每个月 100G 带宽（别人访问你的项目所耗费的流量），个人项目部署完全够用，需要注意的是团队模式收费，所以要协作你只能付费。</li><li>内置 CI CD，你可以理解成一个黑盒，项目丢进去，只需要将项目导入 vercel ，一句命令自动部署。</li><li>因为内置构建流程，支持代码推送、PR 自动触发构建，不同分支唯一地址，方便测试。</li><li>支持本地、测试、生产三种环境部署，仅仅是命令区别，上手成本极低。</li><li>丰富的集成能力，项目部署自动监控，端到端自动化测试等等，当然这些并并属于 vercel 自身的能力，但它可以为你提供集成入口，让这些成为你自动部署中自动进行的一步，比如构建生产后自动完成性能指标输出，自动化测试，以及后续项目监控等等。</li></ul><hr><h1 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h1><p>将项目导入 vercel 后，vercel 会自动检测并为项目所用的框架设置最佳构建配置和部署配置，这也是为什么导入项目就能直接构建的一部分原因，我们先说两种导入项目到 vercel 平台的两种方式。</p><h2 id="GitHub部署"><a href="#GitHub部署" class="headerlink" title="GitHub部署"></a>GitHub部署</h2><p>在 dashboard 点击 <code>Add New</code> 按钮选择 <code>Project</code>，这时会跳转到导入项目界面，选择你的 GitHub 账号（如果之前没绑定这里也可以绑定 GitHub 账号），然后点击导入按钮，这是会跳转到项目设置。这些配置在此时都可以根据实际情况修改。</p><p>直接点击下面的 Deploy 进行部署，然后坐等构建就能看到 vercel 为我们部署后独一无二的预览地址了。</p><p>由于实际开发，我们本地肯定也会克隆 GitHub 项目，那么在后续只要我们修改项目代码，push 到仓库，GitHub 感知到代码变动，vercel 就会自动再次部署。</p><p>你可能会想，我 GitHub 项目拷贝下来会有主分支，以及我的开发分支，vercel 虽然能自动部署，它怎么知道我要部署到什么环境，事实上 vercel 也已经做了提前预设，假设你的代码变动发生在 <code>main</code> 或者 <code>master</code> 分支，那么 vercel 就会自动构建部署生产环境，除此之外的分支，vercel 都会更新预览（测试）环境。</p><p>关于 GitHub 主分支，你可以在 GitHub 进行设置，这个 vercel 无需感知，反正是主分支变动它会对应帮你部署就完事了。</p><p>另外，让远程仓库代码变动有两种方式，第一种是直接本地推送代码，第二种就是提 PR 后合并到目标分支触发变动。</p><p>假设你集成了 GitHub ，在你 PR 合并前，你甚至能在 GitHub PR 中直接看到你需要提 PR 的分支部署后的预览地址，直接看 vercel 帮你部署后的效果。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703213817714-707002200.png" alt="img"></p><p>上图就是我基于主分支 <code>main</code> 切出了一个开发分支 <code>main-echo</code>，然后给 <code>main</code> 分支提了一个 PR，在 PR 合并页面你能看到 GitHub 这里直接给出了 <code>main-echo</code> 分支的部署预览地址，之后我们合并 PR ，由于 <code>main</code> 分支代码发生改变，vercel 会自动帮你构建部署 <code>main</code> 分支，好处就是能保证每次部署前，你能直接看每个分支效果是否符合你的预期。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703213901286-2021907469.png" alt="img"></p><p>可以看到 PR 合并后，vercel 这边已经帮我更新了生产环境，且提交记录与 GitHub 保持一致。</p><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>有时候，我们的项目可能并不在 GitHub 上，我如果需要上传 GitHub 还要做初始化一系列操作，比较麻烦，那么我们就可以通过本地初始化 vercel 让项目直接关联到 vercel，之后直接通过构建命令来达到不同环境的部署效果。</p><p>我们需要在本地安装 vercel，建议是全局安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vercel</span><br></pre></td></tr></table></figure><p>之后执行如下命令保证你本地登录了 vercel 账号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel login</span><br></pre></td></tr></table></figure><p>之后进入你的项目根路径，执行 vercel 即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel</span><br></pre></td></tr></table></figure><p>之后你需要进行一些基础配置，比如你需要选择要部署的项目目录、构建命令和输出目录，如果直接回车就是执行默认配置，这些配置走完后项目就会进行部署，你可以直接等待终端部署完成后的预览地址，你可以回到 vercel 后台找到你刚才关联部署的项目，一样可以找到预览地址。</p><p>我们需要区分 GitHub 部署与本地部署的一些区别，集成 GitHub 后，vercel 会根据 GitHub 代码仓库分支变化，对应的自动部署匹配环境：</p><ul><li>生产环境：假设 GitHub 主分支直接发生代码变动，比如 push，或者有 PR 合并到主分支都会导致生产环境重新部署，而主分支默认是 main 或者 master 分支，你可以在 GitHub 自定义你的主分支。</li><li>预览环境：除了主分支之外的其他分支如果发生代码变动，vercel 会自动构建属于这个分支的独一无二的预览地址。</li></ul><p>我们也可以直接通过命令来进行本地部署，但如果我们集成 GitHub，还是建议走 GitHub 工作流，这样构建会更加规范。</p><p>因此构建命令更适用于本地部署，因为我们的项目并未集成 GitHub ，vercel 无处感知代码变化，这就需要开发来手动通过命令来达到不同环境部署更新的目的，接下来我们介绍不同环境的区别以及对应的命令。</p><hr><h1 id="构建命令与环境介绍"><a href="#构建命令与环境介绍" class="headerlink" title="构建命令与环境介绍"></a>构建命令与环境介绍</h1><p>vercel 其实也分为开发环境，预览环境（测试环境）以及生产环境三个概念，在 vercel 团队版，你甚至能在预览环境直接进行评论（而且评论也能集成到 slack，挺符合目前我们的生态），比如 UI 觉得某些页面还原度不够他就能在预览环境进行评论，所以不同环境确实有本质上的区别以及作用。</p><p>我们可以通过如下三个命令分别构建不同环境，因为比较简单，就一笔带过：</p><ol><li><p><code>vercel dev</code>： 这个命令用于启动本地的开发环境。它会模拟 Vercel 的云环境，让你可以在本地进行开发和测试。使用这个命令，你可以实时看到你的更改效果，而不需要将它们部署到预览或生产环境。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703213914338-777779399.png" alt="img"></p></li><li><p><code>vercel</code>： 这个命令用于将你的项目部署到 Vercel 的预览环境。预览环境是一个为了测试和分享而设立的临时环境，你可以在里面看到你的更改会在生产环境中出现的样子。这个命令非常适用于团队合作的场景，你可以用它来分享你的更改，获取反馈，然后在推向生产环境之前进行进一步的调整。</p></li><li><p><code>vercel --prod</code>： 这个命令会将你的应用部署到生产环境。生产环境通常代表了你的应用的正式发布版本，所部署的内容会对公众可见。这个命令就是将你的项目部署上线的最终步骤。</p></li></ol><hr><h1 id="踩坑与-vercel-平台设置"><a href="#踩坑与-vercel-平台设置" class="headerlink" title="踩坑与 vercel 平台设置"></a>踩坑与 vercel 平台设置</h1><p>单论 vercel 平台你会发现非常简单，导入项目，通过代码推送或者几句命令基本上能满足你的大部分需求，但事实上，我觉得困难的其实是将你个人的项目导入 vercel 并部署成功。</p><p>假设你使用 vercel 官方各框架的模版，因为这些模版比较纯粹简单，你确实不需要任何改动就能成功，但假设你是一个开发已久包含各种定制的项目，可能就没那么顺利，接下来介绍下我将个人项目部署到 vercel 所遇到的一些问题。</p><ul><li><p>vercel 部署对于文件大小写引用更为严格，比如我发现自己项目一些文件引用文件是小写，但引用某个字母大写，Jenkins部署这些非常正常，也不会报错，但vercel 会认为这是错误，并直接报错，如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703213921722-2065595973.png" alt="img"></p><p>这里其实就是因为实际的文件命为 <code>checkbox</code> 而非 <code>Checkbox</code>，所以如果遇到这样的错误，直接找到构建错误信息的文件去看看资源是否存在，或者资源命是否大小写匹配。</p></li><li><p>vercel 在未来只支持 node 18 版本，且 vercel 平台默认就是 18 版本，一般如果你遇到了如下错误，那就是说明 node 版本过高，比如我们现在的项目使用的版本就是 16 ，然后走 vercel 部署 使用18 版本就会报错。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703213929296-1416631248.png" alt="img"></p><p>我之前一直以为需要降低我本地的 node 版本，后来一想不对啊，vercel 部署走的是它的服务，跟我本地环境有啥关系，果然在项目设置中我们能找到 node 版本设置，将其修改为与项目 node 版本匹配的版本之后再构建就不会有上图的错误。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703213940932-1652831555.png" alt="img"></p><p>但即便改成 16 避免了这个报错，vercel 还是会给出 node 版本的告警，它会告诉你在今年8月不再支持 node 14 以及 16 版本的部署，以及在官方博客也提到了这个问题。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703213947890-486521130.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703213959186-1250984255.jpg" alt="img"></p></li><li><p>你可能需要根据自身项目构建配置，对应的调整 vercel 平台的项目设置，比如在这里可以看到构建相关设置，在之前我们提到 vercel 会根据你的项目自动识别框架并初始化默认配置，比如我们项目的在上传后 vercel 成功识别成了 umi，且默认输出目录是 <code>dist</code>，但事实上我们的输出目录并不是这个名字，所以需要在这里修改。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703214005577-100434401.jpg" alt="img"></p></li><li><p>vercel 平台环境并不支持 zip，我在很长一段时间构建项目时 vercel 一直给我报找不到 zip 命令的错误，但我并未发现我的包依赖中有这个包名，同时保险起见，我甚至专门在项目中安装了 zip 这个包，但结果依旧不行，之后我尝试询问 GPT，也确实在 build 命令中发现了一小段利用 zip 来压缩打包产物的命令，在删除这段行为后构建正常。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703214011578-244828207.png" alt="img"></p><p>另外，如果大家看到类似上面的报错，一定不要去管两个错误，比如 <code>exited with 1</code>这种，这类错误都是属于构建失败的通用错误，就像接口 500 给了你一个通用 code 码一样，真正的错误一定就是第一句，你只用解决这个错误就完事了。</p></li></ul><hr><h1 id="能力边界"><a href="#能力边界" class="headerlink" title="能力边界"></a>能力边界</h1><p>以上是 vercel 平台部署以及一些使用上需要注意的点，考虑到未来项目发展，这里顺带普及下我注意到的能力边界。</p><h2 id="支持域名自定义"><a href="#支持域名自定义" class="headerlink" title="支持域名自定义"></a>支持域名自定义</h2><p>理论 vercel 在项目部署后会给我们生产独一无二的地址，但都带有 vercel 后缀，如果是生产环境对外，vercel 痕迹就太明显了，所以如果大家有购买域名，也可以在项目设置中自定义域名。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703214019219-878397012.png" alt="img"></p><h2 id="支持部署-URL-私有化与预览地址自定义（要钱）"><a href="#支持部署-URL-私有化与预览地址自定义（要钱）" class="headerlink" title="支持部署 URL 私有化与预览地址自定义（要钱）"></a>支持部署 URL 私有化与预览地址自定义（要钱）</h2><p>当我们部署预览环境或生产环境时，Vercel 将自动生成唯一的 URL 便于我们访问；默认情况下，该 URL 可以公开访问，但我们可以使用部署保护将其配置为私有地址，比如我们并不希望外界访问我们的测试地址。</p><p>关于 URL 这里先介绍几种地址结构：</p><p>生成环境生成的地址一般是项目名拼接 scope，结构为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;project-name&gt;-&lt;scope-slug&gt;.<span class="property">vercel</span>.<span class="property">app</span>;</span><br></pre></td></tr></table></figure><p>除此之外还有项目名拼项目唯一哈希的地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;project-name&gt;-&lt;unique-hash&gt;-&lt;scope-slug&gt;.<span class="property">vercel</span>.<span class="property">app</span></span><br></pre></td></tr></table></figure><p>当然有时候我们需要区分项目，所以 vercel 也提供了拼接了项目分支的地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;project-name&gt;-git-&lt;branch-name&gt;-&lt;scope-slug&gt;.<span class="property">vercel</span>.<span class="property">app</span></span><br></pre></td></tr></table></figure><p>除了分支，假设我们是团队版，vercel 还会提供项目名拼接用户名的地址，便于区分这个地址是谁构建，结构为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;project-name&gt;-&lt;author-name&gt;-&lt;scope-slug&gt;.<span class="property">vercel</span>.<span class="property">app</span>;</span><br></pre></td></tr></table></figure><p>我们在项目部署面板可以看到不同类型的地址类型，当然这些地址最终呈现的效果完全一致（这里我是个人版）</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703214030336-1621190236.png" alt="img"></p><p>聊聊部署保护，vercel 支持单个部署添加密码保护或者直接将部署设置为私有化部署，前者需要输入预设的密码才能访问地址，后者可以直接大范围让所有部署地址变成私有化，你可能需要密码或者 vercel 身份效验才能访问，比如企业版中我们可能不希望团队外任何人访问测试地址。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703214038599-589042908.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1213309-20230703214045012-103345244.png" alt="img"></p><p>但需要注意的是这项功能需要企业版或者 PRO 版本，简单来说无法白嫖。</p><h2 id="支持-next-项目与-Monorepos-仓库部署"><a href="#支持-next-项目与-Monorepos-仓库部署" class="headerlink" title="支持 next 项目与 Monorepos 仓库部署"></a>支持 next 项目与 Monorepos 仓库部署</h2><p>比如未来我们项目仓库都需要迁移 Monorepos，可能一个项目下需要分别部署单个子项目，目前 vercel 能很好支持 Monorepos 仓库部署，官方也提供了 Monorepos 仓库的例子，因为比较简单大家可以自行尝试。</p><h2 id="丰富的集成能力"><a href="#丰富的集成能力" class="headerlink" title="丰富的集成能力"></a>丰富的集成能力</h2><p>除了前面提到的 GitHub 在集成上表现，vercel 其实提供了配套的对于项目部署中性能检测、项目安全、项目监控、端到端测试等一系列能力，当然现在我们的做法是分散了不同平台（比如 sentry），而非自动化部署一条线中的一部分。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐网站</title>
      <link href="/2024/04/09/recommend/"/>
      <url>/2024/04/09/recommend/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>欢迎给出推荐的链接网址</p></blockquote><ol><li>安娜的影子: <a href="https://zh.annas-archive.org/">zh.annas-archive.org…</a> 影子图书搜索系统</li><li>java-guide: java 教程</li><li>CSDN 转公众号 文章 <a href="https://md.openwrite.cn/">md.openwrite.cn&#x2F;</a></li><li><a href="https://csdiy.wiki/">csdiy.wiki&#x2F;</a></li><li><a href="https://dzone.com/">dzone.com&#x2F;</a> 提供技术新闻、编程教程、及各种工具、开发者的博客等。</li><li><a href="http://www.programcreek.com/">www.programcreek.com...</a> 一个非常优秀的Java博客，包含很多精选文集。</li><li><a href="https://www.ibm.com/developerworks/learn/java/index.html">www.ibm.com/develope...</a> IBM的JAVA开发者网站，很多干货。</li><li><a href="http://www.javaworld.com/">www.javaworld.com/</a> 一个不错的综合性的java网站。</li><li><a href="http://www.onjava.com/">www.onjava.com/</a> 某位国外大神的网站。</li><li><a href="https://codepen.io/pen">codepen.io&#x2F;pen</a> 前端在线运行代码地址</li></ol><blockquote><p>下面是管理员和圈主收集的一些关于算法方面的公开课, 小伙伴们还有更多的欢迎补充嗷</p></blockquote><ul><li>算法训练营 30小时课时：<a href="https://www.bilibili.com/video/BV1TL411Q7Lj/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a></li><li>开课吧数据结构与算法深度剖析 220小时课时：<a href="https://www.bilibili.com/video/BV1p44y1Z7BM/?spm_id_from=333.999.0.0&vd_source=a3d05df5d008bb9f3feaa27dcd67820f">www.bilibili.com/vid...</a></li><li>鲍松山-数据结构C语言版 47小时课时：<a href="https://www.bilibili.com/video/BV1bM411u7Ki/?spm_id_from=333.999.0.0&vd_source=a3d05df5d008bb9f3feaa27dcd67820f">www.bilibili.com/vid...</a></li><li>图灵VIP算法课 45小时课时：<a href="https://www.bilibili.com/video/BV1cA41127n5/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a></li><li>黑马算法课(还在更新)： - <a href="https://www.bilibili.com/video/BV1Lv4y1e7HL/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a><br>- <a href="https://www.bilibili.com/video/BV1rv4y1H7o6/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a></li><li>伊成算法课 183小时课时： - <a href="https://www.bilibili.com/video/BV133411d7vN/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a><br>- <a href="https://www.bilibili.com/video/BV1F341197Nj/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a><br>- <a href="https://www.bilibili.com/video/BV1n8411G7kv/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a><br>- <a href="https://www.bilibili.com/video/BV1gd4y1W7Sq/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a><br>- <a href="https://www.bilibili.com/video/BV1rD4y1n7og/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a><br>- <a href="https://www.bilibili.com/video/BV1A8411A7Fb/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a><br>- <a href="https://www.bilibili.com/video/BV15D4y1T7N8/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a></li><li>左程云：大厂算法与数据结构面试突击班 62小时课时：<a href="https://www.bilibili.com/video/BV16M4y1Q7Qc/?spm_id_from=333.999.0.0&vd_source=a3d05df5d008bb9f3feaa27dcd67820f">www.bilibili.com/vid...</a></li><li>数据结构与算法365天特训营 119小时课时：<a href="https://www.bilibili.com/video/BV1Zf4y1L7GU/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a></li><li>沽泡算法VIP课 18小时课时：<a href="https://www.bilibili.com/video/BV1X44y1j7MX/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a></li><li>算法设计与分析 21小时课时：<a href="https://www.bilibili.com/video/BV1cR4y127rj/?spm_id_from=333.999.0.0">www.bilibili.com/vid...</a></li><li>算法UP：<a href="https://space.bilibili.com/517494241?spm_id_from=333.337.0.0">space.bilibili.com&#x2F;5…</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Netty</title>
      <link href="/2024/04/08/note-netty/"/>
      <url>/2024/04/08/note-netty/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>non-blocking io —— 非阻塞IO</p><h3 id="NIO-三大组件"><a href="#NIO-三大组件" class="headerlink" title="NIO 三大组件"></a>NIO 三大组件</h3><ul><li>channel</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileChannel </span></span><br><span class="line"><span class="comment">// 1.输入输出流  2.RandomAccessFile</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileIuputStream</span>(<span class="string">&quot;xxx.txt&quot;</span>).getChannel())&#123;</span><br><span class="line">    <span class="comment">// 准备缓冲区</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocater(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 从channel 读取数据，向 buffer 写入</span></span><br><span class="line">        <span class="keyword">if</span>(channel.read(buffer) == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 打印 buffer 内容</span></span><br><span class="line">        buffer.flip(); <span class="comment">// 切换读模式</span></span><br><span class="line">        <span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> buffer.get();</span><br><span class="line">            log.debug(<span class="string">&quot;字节&#123;&#125;&quot;</span>,(<span class="type">char</span>)b)</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.clear(); <span class="comment">// 切换写模式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>buffer</p></li><li><p>selector</p></li></ul><h3 id="ByteBuffer"><a href="#ByteBuffer" class="headerlink" title="ByteBuffer"></a>ByteBuffer</h3><ol><li><p>ByteBuffer 使用</p><ul><li>向buffer写入数据，例如调用 channel.read(buffer)</li><li>调用flip()切换至读模式</li><li>从buffer读取数据，例如调用buffer.get()</li><li>调用clear()或compact()切换至写模式</li><li>重复1~4步骤</li></ul></li><li><p>ByteBuffer 结构</p><ul><li>capacity 容量</li><li>position 起始位置</li><li>limit 限制大小</li></ul></li><li><p>ByteBuffer 方法</p><ul><li><p>分配空间</p><ul><li><p>allocate() -java 堆内存，读写效率较低，受GC影响</p></li><li><p>allocateDirect()      -直接内存，读写效率高(少一次拷贝)，不受GC影响，分配效率低</p></li></ul></li><li><p>向buffer写入数据</p><ul><li><p>调用channel.read()</p></li><li><p>调用buffer.put()</p></li></ul></li><li><p>从buffer读取数据</p><ul><li><p>调用channel.write()</p></li><li><p>调用buffer.get() </p><ul><li>get()会让position指针后移，重复读取：调用rewind()重置position 为0或者get(i)获取索引i的内容</li><li>get(i)不会改变position位置</li><li>mark &amp; reset：mark记录position位置，reset回到mark记录的位置</li></ul></li></ul></li><li><p>字符串转ByteBuffer</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.字符串str转为 ByteBuffer</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer1</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16</span>);</span><br><span class="line">buffer1.put(str.getBytes());</span><br><span class="line"><span class="comment">// 2.Charset</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer2</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(str);</span><br><span class="line"><span class="comment">// 3.wrap 字节数组跟ByteBuffer转换</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer3</span> <span class="operator">=</span> ByteBuffer.wrap(str.getBytes());</span><br></pre></td></tr></table></figure><ul><li>ByteBuffer转字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ByteBuffer转为字符串</span></span><br><span class="line">buffer1.flip();</span><br><span class="line">str = StandardCharsets.UTF_8.decode(buffer1).toString();</span><br><span class="line"><span class="comment">// Charset类型：会自动重置position，不用切换读模式</span></span><br><span class="line">str = StandardCharsets.UTF_8.decode(buffer2).toString();</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件编程"><a href="#文件编程" class="headerlink" title="文件编程"></a>文件编程</h3><h4 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h4><blockquote><p>FileChannel只能工作在阻塞模式下</p></blockquote><ol><li>获取</li></ol><p>不能直接打开FileChannel,必须通过FilelnputStream、FileOutputStream或者RandomAccessFile来获取FileChannel,它们都有getChannel方法</p><ul><li>通过FilelnputStream获取的channel只能读</li><li>通过FileOutputStream获取的channel只能写</li><li>通过RandomAccessFile是否能读写根据构造RandomAccessFile时的读写模式**(r &#x2F; w)**决定</li></ul><ol start="2"><li>读取</li></ol><p>会从channel读取数据填充ByteBuffer,返回值表示读到了多少字节，-1表示到达了文件的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> channel.read(buffer);</span><br></pre></td></tr></table></figure><ol start="3"><li>写入</li></ol><p>写入的正确姿势如下，SocketChannel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span>...</span><br><span class="line">buffer.put(...);/存入数据</span><br><span class="line">buffer.fIip(O;<span class="comment">//切换读模式</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">channel.write(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在while中调用channel.write是因为write方法并不能保证一次将buffer中的内容全部写入channel</p><ol start="4"><li>关闭</li></ol><p>channel必须关闭，不过调用了FilelnputStream、FileOutputStream或者RandomAccessFile的close方法会间接地调用channel的close方法</p><ol start="5"><li>位置</li></ol><p>获取当前位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">pos</span> <span class="operator">=</span> channel.position();</span><br></pre></td></tr></table></figure><p>设置当前位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">newPos</span> <span class="operator">=</span> ...;</span><br><span class="line">channel.position(newPos);</span><br></pre></td></tr></table></figure><p>设置当前位置时，如果设置为文件的末尾</p><ul><li>这时读取会返回-1</li><li>这时写入，会追加内容，但要注意如果p0sit0超过了文件末尾，再写入时在新内容和原末尾之间会有空洞(00)</li></ul><ol start="6"><li>大小</li></ol><p>使用size方法获取文件的大小</p><ol start="7"><li>强制写入</li></ol><p>操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用force(true)方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘</p><h4 id="两个Channel传输数据"><a href="#两个Channel传输数据" class="headerlink" title="两个Channel传输数据"></a>两个Channel传输数据</h4><p>transferTo()</p><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4><h4 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h4><ul><li>拷贝文件 (跟transferTo一样效率较高)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Files.copy(source,target);</span><br></pre></td></tr></table></figure><p> walkFileTree();</p><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h4 id="阻塞模式-vs-非阻塞模式"><a href="#阻塞模式-vs-非阻塞模式" class="headerlink" title="阻塞模式 vs 非阻塞模式"></a>阻塞模式 vs 非阻塞模式</h4><p>阻塞方法，线程停止运行</p><ul><li>阻塞</li><li>非阻塞</li><li>多路复用</li></ul><p>单线程可以配合Selector完成对多个Channel可读写事件的监控，这称之为多路复用</p><ul><li><p>多路复用仅针对网络IO、普通文件IO没法利用多路复用</p></li><li><p>如果不用Selector的非阻塞模式，线程大部分时间都在做无用功，而Selector能够保证：</p><blockquote><p>有可连接事件时才去连接</p><p>有可读事件才去读取</p><p>有可写事件才去写入</p></blockquote></li></ul><p>限于网络传输能力，Channel未必时时可写，一旦Channel可写，会触发Selector的可写事件</p><h4 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h4><ul><li><p>accept -会在有连接请求时触发</p></li><li><p>connect  -是客户端，连接建立后触发</p></li><li><p>read-可读事件</p></li><li><p>write   -可写事件</p></li></ul><p>ServerSocketChannel是用来连接的，SocketChannel是用来处理客户端发的消息的</p><p>select()：没有事件发生，阻塞，有事件，线程才会恢复运行。在事件未处理时，它不会阻塞。事件发生后要么处理要么取消。selectionKey .cancel()取消</p><p>Selector 最大的好处是可以通过阻塞方法select()拿到SelectionKey 判断时间类型从而做出不同的逻辑处理</p><hr><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpirngCloud</title>
      <link href="/2024/04/07/note-springcloud/"/>
      <url>/2024/04/07/note-springcloud/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="SpringCloud笔记"><a href="#SpringCloud笔记" class="headerlink" title="SpringCloud笔记"></a>SpringCloud笔记</h2><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/20210615102152488.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/20210615102309498.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/cxz206015/images/raw/master/assets/20210617162056915.png" alt="在这里插入图片描述"></p><p>SpringCloud共分为五大组件</p><p>服务注册中心：Eureka、Zookeeper、Consul、<strong>Nacos</strong></p><p>负载均衡：Ribbon、Feign、<strong>OpenFeign</strong></p><p>路由网关：zuul、<strong>SpringCloudGateway</strong></p><p>配置中心：SpringCloudConfig、<strong>Nacos</strong></p><p>熔断降级：Hystrix、<strong>Sentinel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAP定理：CAP定理又称CAP原则，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本） 可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性） 分区容忍性（P），就是高可用性，一个节点崩了，并不影响其它的节点</span><br></pre></td></tr></table></figure><p><strong>安装Nacos</strong></p><p><strong>1.Windows安装</strong></p><ol><li><p>在 Github 下载 Nacos 安装包，并将这个安装包解压到任意非中文目录下</p></li><li><p>Nacos的默认端口是8848。也可以进入nacos的conf目录，修改application.properties配置文件中的端口</p></li><li><p>进入bin目录，执行命令启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// windows命令</span><br><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></li><li><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E8%AE%BF%E9%97%AE%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFnacos">http://127.0.0.1:8848/nacos访问，默认的账号和密码都是nacos</a></p></li></ol><p><strong>2.Linux安装</strong></p><ol><li><p>安装JDK。Nacos依赖于JDK运行，上传到Linux服务器的某个目录，例如：<code>/usr/local/</code>，然后解压缩重命名为java</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf jdk-8u144-linux-x64.tar.gz</span><br><span class="line">// 配置环境变量</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">// 设置环境变量</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>上传nacos安装包并解压。上传到Linux服务器的某个目录，例如<code>/usr/local/src</code>目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 解压缩安装包</span><br><span class="line">tar -xvf nacos-server-1.4.1.tar.gz</span><br><span class="line">// 然后删除安装包</span><br><span class="line"><span class="built_in">rm</span> -rf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>配置端口，启动。端口配置同windows，在nacos&#x2F;bin目录中，输入命令启动Nacos</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="注册中心——Nacos"><a href="#注册中心——Nacos" class="headerlink" title="注册中心——Nacos"></a>注册中心——Nacos</h2><h3 id="配置Nacos"><a href="#配置Nacos" class="headerlink" title="配置Nacos"></a>配置Nacos</h3><ul><li>引依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父工程： --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>配置nacos地址</li></ul><p>在每个微服务的 application.yml 中添加nacos地址，然后重启微服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><h3 id="配置Nacos集群"><a href="#配置Nacos集群" class="headerlink" title="配置Nacos集群"></a>配置Nacos集群</h3><p>修改微服务的 application.yml 文件，添加集群配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p><strong>同集群优先的负载均衡</strong></p><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      discovery:</span><br><span class="line">        cluster-name: HZ <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>2）修改负载均衡规则</p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><h3 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h3><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下 NacosRule 是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到微服务的实例列表，点击编辑，即可修改权重</p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>Nacos提供了 namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210714000101516.png" alt="image-20210714000101516" style="zoom:33%;" /><p>1）创建namespace</p><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p>我们可以点击页面新增按钮，添加一个namespace，然后，填写表单就能在页面看到一个新的namespace：</p><p> 2）给微服务配置namespace</p><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure><h3 id="Nacos与Eureka的区别"><a href="#Nacos与Eureka的区别" class="headerlink" title="Nacos与Eureka的区别"></a>Nacos与Eureka的区别</h3><p>Nacos的服务实例分为两种类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><img src="https://gitee.com/cxz206015/images/raw/master/assets/image-20210714001728017.png" alt="image-20210714001728017" style="zoom:67%;" /><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><hr><h2 id="配置中心——Nacos"><a href="#配置中心——Nacos" class="headerlink" title="配置中心——Nacos"></a>配置中心——Nacos</h2><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><ul><li><p>添加配置文件</p><p>选择配置列表，然后在弹出的表单中，填写配置信息：</p></li></ul><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210714164856664.png" alt="image-20210714164856664" style="zoom:50%;" /><blockquote><p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不变的一些配置还是保存在微服务本地比较好。</p></blockquote><ul><li><p>从微服务拉取配置</p><p>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。</p><p>因此spring引入了一种新的配置文件：bootstrap.yaml 文件，会在 application.yml 之前被读取，流程如下：</p></li></ul><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/L0iFYNF.png" alt="img" style="zoom:50%;" /><p>1）引入nacos-config依赖</p><p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）添加bootstrap.yaml</p><p>然后，在user-service中添加一个bootstrap.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure><p>这里会根据spring.cloud.nacos.server-addr 获取nacos地址，再根据id来读取配置，文件id：</p><p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code></p><p>3）读取nacos配置</p><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p>我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p><p>要实现配置热更新，可以使用两种方式：</p><ul><li><p>方式一</p><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p></li></ul><img src="https://gitee.com/cxz206015/images/raw/master/assets/image-20210714171036335.png" alt="image-20210714171036335" style="zoom:50%;" /><ul><li><p>方式二</p><p>使用@ConfigurationProperties注解代替@Value注解。</p><p>在user-service服务中，添加一个类，读取 patterrn.dateformat 属性：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 UserController 中使用这个类代替 @Value：</p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210714171316124.png" alt="image-20210714171316124" style="zoom:50%;" /><h3 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h3><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p><p>1）添加一个环境共享配置</p><p>我们在nacos中添加一个 userservice.yaml 文件：</p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210714173233650.png" alt="image-20210714173233650" style="zoom:50%;" /><p>2）配置共享的优先级</p><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210714174623557.png" alt="image-20210714174623557" style="zoom:50%;" /><h3 id="Nacos集群"><a href="#Nacos集群" class="headerlink" title="Nacos集群"></a>Nacos集群</h3><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210409210621117.png" alt="image-20210409210621117" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210409211355037.png" alt="image-20210409211355037" style="zoom:50%;" /><p>搭建集群的基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载并配置nacos</li><li>启动nacos集群</li><li>nginx反向代理</li></ul><ol><li><p>初始化数据库</p><p>Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。</p><p>官方推荐的最佳实践是使用带有主从的高可用数据库集群</p></li><li><p>配置Nacos</p><p>将这个包解压到任意非中文目录下，进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf，然后添加内容，修改application.properties文件，添加数据库配置。修改每个nacos节点的配置文件</p></li><li><p>启动</p></li></ol><p>   分别启动三个nacos节点：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd</span><br></pre></td></tr></table></figure><ol start="4"><li><p>nginx反向代理</p><p>修改conf&#x2F;nginx.conf文件，而后在浏览器访问：<a href="http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost/nacos即可。</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> nacos-cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8845</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8846</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8847</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nacos &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优化</p></li></ol><ul><li><p>实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.</p></li><li><p>Nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离</p></li></ul><h2 id="负载均衡——LoadBalance"><a href="#负载均衡——LoadBalance" class="headerlink" title="负载均衡——LoadBalance"></a>负载均衡——LoadBalance</h2><p>Ribbon实现负载均衡</p><p>LoadBalance实现负载均衡</p><h3 id="基于-RestTemplate和-LoadBalanced-注解"><a href="#基于-RestTemplate和-LoadBalanced-注解" class="headerlink" title="基于 RestTemplate和 @LoadBalanced 注解"></a>基于 RestTemplate和 @LoadBalanced 注解</h3><p><code>RestTemplate</code> 是 <strong>spring-web</strong> 包提供的, 用来调用 <strong>HTTP</strong> 接口的工具类, 它提供了 <code>GET</code>、<code>POST</code> 等常用的请求方法</p><ol><li><p>添加到 spring 容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用前注入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br></pre></td></tr></table></figure></li><li><p>常用 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 GET 请求</span></span><br><span class="line">restTemplate.getForObject(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">restTemplate.postForObject(...)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 自定义</span></span><br><span class="line">restTemplate.execute(...)</span><br></pre></td></tr></table></figure></li></ol><p>按照上面那种简单的写法, 我们只能调用有明确 <strong>IP</strong> 和 <strong>端口</strong> 的接口, 要想实现我们的需求, 至少要做两件事情:</p><ol><li>根据服务名拿到服务实例的信息</li><li>负载均衡算法</li></ol><p><code>RestTemplate</code> 提供了拦截器的功能 <code>ClientHttpRequestInterceptor</code>, 开发者可以 <strong>手动编码</strong> 实现上面两个功能. </p><p>Spring Cloud 使用方式如下:</p><ol><li><p>在原有基础上加上 <code>@LoadBalanced</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用接口时,传入服务名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://user-service/getUser&quot;</span>, User.class);</span><br></pre></td></tr></table></figure></li></ol><p>一个注解就帮我们完成了负载均衡</p><h3 id="基于-DiscoveryClient"><a href="#基于-DiscoveryClient" class="headerlink" title="基于 DiscoveryClient"></a>基于 DiscoveryClient</h3><p><code>org.springframework.cloud.client.discovery.DiscoveryClient</code> 可以帮我们实现服务发现的功能, 只要我们拿到服务对应的实例信息, 后面 <strong>负载均衡</strong> 可以手动编码实现</p><ol><li><p>注入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br></pre></td></tr></table></figure></li><li><p>获取注册中心服务实例列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;user-service&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>选取一个实例的地址信息, 发送请求</p></li></ol><h3 id="基于-Feign-的声明式调用"><a href="#基于-Feign-的声明式调用" class="headerlink" title="基于 Feign 的声明式调用"></a>基于 Feign 的声明式调用</h3><p>feign作为远程调用框架集成了ribbon实现的负载均衡，故feign的介绍在远程服务调用。</p><hr><h2 id="远程服务调用——Feign"><a href="#远程服务调用——Feign" class="headerlink" title="远程服务调用——Feign"></a>远程服务调用——Feign</h2><h3 id="类比Spring和Feign"><a href="#类比Spring和Feign" class="headerlink" title="类比Spring和Feign"></a>类比Spring和Feign</h3><p>Spring的声明式事务，只需要简单的在配置文件中告诉Spring要对谁加事务，把规则定义清楚就好了，剩下的交给spring</p><p>Feign的声明式Http客户端，将发请求所需要的信息声明出来，剩下的事交给Feign来做</p><h3 id="使用Feign的步骤"><a href="#使用Feign的步骤" class="headerlink" title="使用Feign的步骤"></a><strong>使用Feign的步骤</strong></h3><p>① 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>② 添加@EnableFeignClients注解</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210714175102524.png" alt="image-20210714175102524"></p><p>③ 编写FeignClient接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：userservice</li><li>请求方式：GET</li><li>请求路径：&#x2F;user&#x2F;{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了</p><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/0e0a73607da42866a8705bc55b8e66c6.png" alt="image-20220316103458187"></p><h3 id="Feign使用优化"><a href="#Feign使用优化" class="headerlink" title="Feign使用优化"></a>Feign使用优化</h3><ul><li>日志级别尽量用basic</li><li>使用HttpClient或OKHttp代替URLConnection</li></ul><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p><ul><li><p>URLConnection：默认实现，不支持连接池</p></li><li><p>Apache HttpClient ：支持连接池</p></li><li><p>OKHttp：支持连接池</p></li></ul><p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的 URLConnection。</p><p>① 引入Apache的HttpClient依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>② 配置连接池</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure><hr><h2 id="路由网关——Gateway"><a href="#路由网关——Gateway" class="headerlink" title="路由网关——Gateway"></a>路由网关——Gateway</h2><h3 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h3><ol><li><p>引入nacos服务发现和gateway依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--gateway网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure></li></ol><p>路由配置包括：</p><ol><li><p>路由id：路由的唯一标示</p></li><li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p></li><li><p>路由断言（predicates）：判断路由的规则，主要为Path这种路由工程</p></li><li><p>路由过滤器（filters）：对请求或响应做处理</p></li></ol><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>① 路由过滤器</p><p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> </span><br><span class="line">        <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=xxx</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure><p>② 默认过滤器</p><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> </span><br></pre></td></tr></table></figure><p>③ 全局过滤器</p><p><strong>作用：</strong>处理一切进入网关的请求和微服务响应，同GatewayFilter</p><p><strong>区别：</strong>GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的定义方式是实现GlobalFilter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在filter中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><p><strong>自定义全局过滤器：</strong></p><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li><p>参数中是否有authorization，</p></li><li><p>authorization参数值是否为admin</p></li></ul><p>如果同时满足则放行，否则拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.拦截</span></span><br><span class="line">        <span class="comment">// 4.1.禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="comment">// 4.2.结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ 过滤器执行顺序</p><p><img src="https://gitee.com/cxz206015/images/raw/master/assets/image-20210714214228409.png" alt="image-20210714214228409"></p><p>排序的规则：</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链。</p><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li><p>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</p></li><li><p>域名相同，端口不同：localhost : 8090和localhost : 10010</p></li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210714215832675.png" alt="image-20210714215832675"></p><p>解决方案：<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">CORS</a></p><p>在gateway服务的application.yml文件中，添加下面的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><hr><h2 id="熔断降级——Sentinel"><a href="#熔断降级——Sentinel" class="headerlink" title="熔断降级——Sentinel"></a>熔断降级——Sentinel</h2><h2 id="分布式事务——Seata"><a href="#分布式事务——Seata" class="headerlink" title="分布式事务——Seata"></a>分布式事务——Seata</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2024/04/06/note-docker/"/>
      <url>/2024/04/06/note-docker/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210731155141362.png" alt="image-20210731155141362" style="zoom: 25%;" /><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看xx帮助</span></span><br><span class="line">docker xx --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#拉取镜像 </span></span><br><span class="line">docker pull nginx:[tag]</span><br><span class="line"><span class="comment">#查看拉取到的镜像</span></span><br><span class="line">docker images </span><br><span class="line"><span class="comment">#导出镜像到磁盘</span></span><br><span class="line">docker save -o nginx.tar nginx:latest</span><br><span class="line"><span class="comment">#删除镜像</span></span><br><span class="line">docker rmi nginx:latest</span><br><span class="line"><span class="comment">#把镜像加载回来</span></span><br><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210731155649535.png" alt="image-20210731155649535" style="zoom: 25%;" /><hr><h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h2><h3 id="docker服务"><a href="#docker服务" class="headerlink" title="docker服务"></a>docker服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#查看docker下对应服务的CONTAINER ID</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment">#拿到容器id后用id或者别名来启动容器</span></span><br><span class="line">docker start fbc1c7e26839</span><br><span class="line">docker start mq</span><br><span class="line"><span class="comment">#查看mq端口映射关系</span></span><br><span class="line">docker port mq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 docker 自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line"><span class="comment"># 关闭 docker 自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> docker.service</span><br></pre></td></tr></table></figure><h3 id="docker容器-1"><a href="#docker容器-1" class="headerlink" title="docker容器"></a>docker容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每次docker服务重启后容器也自动重启</span></span><br><span class="line">docker run --restart=always</span><br><span class="line"><span class="comment"># 开启容器自启动</span></span><br><span class="line">docker update --restart=always nginx</span><br><span class="line"><span class="comment"># 关闭容器自启动</span></span><br><span class="line">docker update --restart=no nginx</span><br></pre></td></tr></table></figure><ul><li>no：不要自动重启容器。（默认）</li><li>on-failure： 如果容器由于错误而退出，则重新启动容器，该错误表现为非零退出代码。</li><li>always：如果容器停止，请务必重启容器。如果手动停止，则仅在Docker守护程序重新启动或手动重新启动容器本身时才重新启动。</li><li>unless-stopped：类似于always，除了当容器停止（手动或其他方式）时，即使在Docker守护程序重新启动后也不会重新启动容器。</li></ul><h3 id="docker容器操作"><a href="#docker容器操作" class="headerlink" title="docker容器操作"></a>docker容器操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建并运行nginx容器</span></span><br><span class="line">docker run --name mn -p 80:80 -d nginx</span><br><span class="line"><span class="comment">#进入容器，修改文件</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br><span class="line"><span class="comment">#查看日志: -f参数可以持续查看日志</span></span><br><span class="line">docker logs</span><br><span class="line"><span class="comment">#查看容器状态: -a查看所有容器，包括已经停止的</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20210731161950495.png" alt="image-20210731161950495" style="zoom: 33%;" /><hr><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建数据卷</span></span><br><span class="line">docker volume create html</span><br><span class="line"><span class="comment">#查看所有数据</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment">#查看数据卷详细信息卷</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment">#删除指定数据卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span></span><br><span class="line"><span class="comment">#删除所有未使用的数据卷</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="comment">#创建容器并挂载数据卷到容器内的HTML目录</span></span><br><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><hr><h2 id="dockerfile自定义镜像"><a href="#dockerfile自定义镜像" class="headerlink" title="dockerfile自定义镜像"></a>dockerfile自定义镜像</h2><hr><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2024/04/05/note-linux/"/>
      <url>/2024/04/05/note-linux/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="处理目录"><a href="#处理目录" class="headerlink" title="处理目录"></a>处理目录</h2><p>可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man ls</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls（英文全拼：list files）: 列出目录及文件名</span></span><br><span class="line">-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</span><br><span class="line">-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</span><br><span class="line">-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</span><br><span class="line"><span class="comment"># cd（英文全拼：change directory）：切换目录</span></span><br><span class="line">-相对路径 ：<span class="built_in">cd</span> /root/runoob/</span><br><span class="line">    -绝对路径 ：<span class="built_in">cd</span> ./runoob/</span><br><span class="line">    -回到自己的家目录 ：<span class="built_in">cd</span> ~</span><br><span class="line">    -表示去到目前的上一级目录 ：<span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># pwd（英文全拼：print work directory）：显示目前的目录</span></span><br><span class="line">    -P ：显示出确实的路径，而非使用链接 (<span class="built_in">link</span>) 路径。</span><br><span class="line"><span class="comment"># mkdir（英文全拼：make directory）：创建一个新的目录</span></span><br><span class="line">    -m ：配置文件的权限</span><br><span class="line">-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来</span><br><span class="line"><span class="comment"># rmdir（英文全拼：remove directory）：删除一个空的目录</span></span><br><span class="line">    -p ：从该目录起，一次删除多级空目录</span><br><span class="line"><span class="comment"># cp（英文全拼：copy file）: 复制文件或目录</span></span><br><span class="line">    -a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</span><br><span class="line">-d：若来源档为链接档的属性(<span class="built_in">link</span> file)，则复制链接档属性而非文件本身</span><br><span class="line">-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次</span><br><span class="line">    -i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</span><br><span class="line">    -l：进行硬式链接(hard <span class="built_in">link</span>)的链接档创建，而非复制文件本身</span><br><span class="line">    -p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)</span><br><span class="line">    -r：递归持续复制，用於目录的复制行为；(常用)</span><br><span class="line">    -s：复制成为符号链接档 (symbolic <span class="built_in">link</span>)，亦即『捷径』文件</span><br><span class="line">    -u：若 destination 比 <span class="built_in">source</span> 旧才升级 destination </span><br><span class="line"><span class="comment"># rm（英文全拼：remove）: 删除文件或目录</span></span><br><span class="line">    -f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息</span><br><span class="line">-i ：互动模式，在删除前会询问使用者是否动作</span><br><span class="line">-r ：递归删除。最常用在目录的删除，这是非常危险的选项</span><br><span class="line"><span class="comment"># mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</span></span><br><span class="line">-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span><br><span class="line">-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖</span><br><span class="line">-u ：若目标文件已经存在，且 <span class="built_in">source</span> 比较新，才会升级</span><br><span class="line"><span class="comment"># cat : 查看文档</span></span><br></pre></td></tr></table></figure><hr><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看ip</span></span><br><span class="line">ip addr show</span><br><span class="line"><span class="comment"># 查看jdk路径</span></span><br><span class="line">whereis java </span><br><span class="line"><span class="comment"># 使用 ps 命令检查进程是否正在运行：</span></span><br><span class="line">ps aux | grep &lt;your_jar_file_name&gt;</span><br><span class="line"><span class="comment"># 查看java相关进程</span></span><br><span class="line">ps -ef | grep java</span><br><span class="line"><span class="comment"># 查看对应端口号的进程</span></span><br><span class="line">lsof -i port</span><br><span class="line"><span class="comment"># 杀对应pid的进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br><span class="line"><span class="comment">#-t 选项用于显示 TCP 协议连接。</span></span><br><span class="line"><span class="comment">#-l 选项用于显示监听状态的连接。</span></span><br><span class="line"><span class="comment">#-n 选项用于显示 IP 地址和端口号，而不是主机名和服务名。</span></span><br><span class="line"><span class="comment">#-p 选项用于显示关联的进程名和进程ID。</span></span><br><span class="line"><span class="comment">#grep:8080 用于过滤输出，只显示包含字符串 &quot;:8080&quot; 的行。</span></span><br><span class="line">sudo netstat -tlnp | grep:8080</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2024/04/04/note-redis/"/>
      <url>/2024/04/04/note-redis/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Redis常用指令"><a href="#Redis常用指令" class="headerlink" title="Redis常用指令"></a>Redis常用指令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看redis版本</span></span><br><span class="line">redis-server -v</span><br><span class="line">redis-server --version</span><br><span class="line"><span class="comment">#查看redis-cli</span></span><br><span class="line">redis-cli -v</span><br><span class="line">redis-cli --version</span><br></pre></td></tr></table></figure><img src="https://gitee.com/cxz206015/images/raw/master/assets/31100821_63d878151439836251.png" style="zoom: 67%;" /><hr><h2 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h2><p>Redis 是一种基于内存的数据库，对数据的读写操作都是在内存中完成，因此<strong>读写速度非常快</strong>，常用于<strong>缓存，消息队列、分布式锁等场景</strong>。</p><p>Redis 提供了多种数据类型来支持不同的业务场景，比如 String(字符串)、Hash(哈希)、 List (列表)、Set(集合)、Zset(有序集合)、Bitmaps（位图）、HyperLogLog（基数统计）、GEO（地理信息）、Stream（流），并且对数据类型的操作都是<strong>原子性</strong>的，因为执行命令由单线程负责的，不存在并发竞争的问题。</p><p>除此之外，Redis 还支持<strong>事务 、持久化、Lua 脚本、多种集群方案（主从复制模式、哨兵模式、切片机群模式）、发布&#x2F;订阅模式，内存淘汰机制、过期删除机制</strong>等等。</p><h3 id="redis为什么更快？"><a href="#redis为什么更快？" class="headerlink" title="redis为什么更快？"></a>redis为什么更快？</h3><p>官方使用基准测试的结果是，<strong>单线程的 Redis 吞吐量可以达到 10W&#x2F;每秒</strong>，如下图所示：</p><p><img src="https://gitee.com/cxz206015/images/raw/master/assets/640" alt="图片">img</p><p>之所以 Redis 采用单线程（网络 I&#x2F;O 和执行命令）那么快，有如下几个原因：</p><ul><li>Redis 的大部分操作<strong>都在内存中完成</strong>，并且采用了高效的数据结构，因此 Redis 瓶颈可能是机器的内存或者网络带宽，而并非 CPU，既然 CPU 不是瓶颈，那么自然就采用单线程的解决方案了；</li><li>Redis 采用单线程模型可以<strong>避免了多线程之间的竞争</strong>，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁问题。</li><li>Redis 采用了 <strong>I&#x2F;O 多路复用机制</strong>处理大量的客户端 Socket 请求，IO 多路复用机制是指一个线程处理多个 IO 流，就是我们经常听到的 select&#x2F;epoll 机制。简单来说，在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听 Socket 和已连接 Socket。内核会一直监听这些 Socket 上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</li></ul><h3 id="redis-怎么实现持久化的？"><a href="#redis-怎么实现持久化的？" class="headerlink" title="redis 怎么实现持久化的？"></a>redis 怎么实现持久化的？</h3><p>Redis 的读写操作都是在内存中，所以 Redis 性能才会高，但是当 Redis 重启后，内存中的数据就会丢失，那为了保证内存中的数据不会丢失，Redis 实现了数据持久化的机制，这个机制会把数据存储到磁盘，这样在 Redis 重启就能够从磁盘中恢复原有的数据。</p><p>Redis 共有两种数据持久化的方式：</p><ul><li><strong>AOF 日志</strong>：每执行一条写操作命令，就把该命令以追加的方式写入到一个文件里；</li><li><strong>RDB 快照</strong>：将某一时刻的内存数据，以二进制的方式写入磁盘；</li></ul><h3 id="redis单线程在多核机器里使用会不会浪费机器资源？"><a href="#redis单线程在多核机器里使用会不会浪费机器资源？" class="headerlink" title="redis单线程在多核机器里使用会不会浪费机器资源？"></a>redis单线程在多核机器里使用会不会浪费机器资源？</h3><p>虽然 Redis 的主要工作（网络 I&#x2F;O 和执行命令）一直是单线程模型，但是<strong>在 Redis 6.0 版本之后，也采用了多个 I&#x2F;O 线程来处理网络请求</strong>，<strong>这是因为随着网络硬件的性能提升，Redis 的性能瓶颈有时会出现在网络 I&#x2F;O 的处理上</strong>。</p><p>所以为了提高网络 I&#x2F;O 的并行度，Redis 6.0 对于网络 I&#x2F;O 采用多线程来处理。但是对于命令的执行，Redis 仍然使用单线程来处理。</p><p>Redis 官方表示，<strong>Redis 6.0 版本引入的多线程 I&#x2F;O 特性对性能提升至少是一倍以上</strong>。</p><h3 id="redis-执行命令还是单线程，那如何利用多核心来提升性能？"><a href="#redis-执行命令还是单线程，那如何利用多核心来提升性能？" class="headerlink" title="redis 执行命令还是单线程，那如何利用多核心来提升性能？"></a>redis 执行命令还是单线程，那如何利用多核心来提升性能？</h3><p>可以在系统部署多个 redis docker 容器来处理，达到充分利用 cpu 多核心的效果</p><h3 id="redis缓存穿透、缓存击穿、缓存雪崩是什么？怎么解决？"><a href="#redis缓存穿透、缓存击穿、缓存雪崩是什么？怎么解决？" class="headerlink" title="redis缓存穿透、缓存击穿、缓存雪崩是什么？怎么解决？"></a>redis缓存穿透、缓存击穿、缓存雪崩是什么？怎么解决？</h3><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h4><p>当<strong>大量缓存数据在同一时间过期或者 Redis 故障宕机</strong>时，如果此时有大量的用户请求，都无法在 Redis 中处理，于是全部请求都直接访问数据库，从而导致数据库的压力增加，严重的会造成数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃。</p><p><strong>解决方法</strong></p><ul><li><p><strong>大量数据同时过期</strong></p><ul><li>*均匀设置过期时间**：避免将大量的数据设置成同一个过期时间。</li><li><strong>互斥锁</strong>：当业务线程在处理用户请求时，如果发现访问的数据不在 Redis 里，就加个互斥锁，保证同一时间内只有一个请求来构建缓存。未能获取互斥锁的请求等待锁释放后重新读取缓存，或者返回空值或者默认值。</li><li><strong>双key策略</strong>：使用两个key，一个是主key，设置过期时间，一个是备key，不会设置过期，key不一样，但是value值是一样。当业务线程访问不到主key的缓存数据时，就直接返回备key的缓存数据，然后在更新缓存的时候，同时更新主key和备key的数据。</li><li><strong>后台更新缓存</strong>：业务线程不再负责更新缓存，缓存也不设置有效期，而是让缓存“永久有效”，并将更新缓存的工作交由后台线程定时更新。</li></ul></li><li><p><strong>Redis故障宕机</strong></p><ul><li>服务熔断或请求限流机制：启动<strong>服务熔断</strong>机制，<strong>暂停业务应用对缓存服务的访问，直接返回错误</strong>，所以不用再继续访问数据库，保证数据库系统的正常运行，等到 Redis 恢复正常后，再允许业务应用访问缓存服务。服务熔断机制是保护数据库的正常允许，但是暂停了业务应用访问缓存服系统，全部业务都无法正常工作。也可以启用<strong>请求限流</strong>机制，<strong>只将少部分请求发送到数据库进行处理，再多的请求就在入口直接拒绝服务</strong>。</li><li>构建高可靠集群：通过<strong>主从节点的方式构建 Redis 缓存高可靠集群</strong>。如果 Redis 缓存的主节点故障宕机，从节点可以切换成为主节点，继续提供缓存服务，避免了由于 Redis 故障宕机而导致的缓存雪崩问题。</li></ul></li></ul><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a><strong>缓存击穿</strong></h4><p>如果缓存中的<strong>某个热点数据过期</strong>了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易就被高并发的请求冲垮。</p><p><strong>解决方案</strong>：</p><ul><li><strong>互斥锁方案</strong>：保证同一时间只有一个业务线程更新缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。</li><li><strong>不给热点数据设置过期时间</strong>：由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间。</li></ul><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a><strong>缓存穿透</strong></h4><p>当用户访问的数据，<strong>既不在缓存中，也不在数据库中</strong>，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，没办法构建缓存数据，来服务后续的请求。那么当有大量这样的请求到来时，数据库的压力骤增，这就是<strong>缓存穿透</strong>的问题。</p><p><strong>解决方案</strong></p><ul><li><strong>非法请求的限制</strong>：当有大量恶意请求访问不存在的数据的时候会发生缓存穿透，可以在 API 入口处判断求请求参数是否合理，请求参数是否含有非法值、请求字段是否存在，如果判断出是恶意请求就直接返回错误，避免进一步访问缓存和数据库。</li><li><strong>缓存空值或者默认值</strong>：当线上业务发现缓存穿透的现象时，可以针对查询的数据，在缓存中设置一个空值或者默认值，这样后续请求就可以从缓存中读取到空值或者默认值，返回给应用，而不会继续查询数据库。</li><li><strong>使用布隆过滤器快速判断数据是否存在，避免通过查询数据库来判断数据是否存在</strong>：可以在写入数据库数据时，使用布隆过滤器做个标记，然后在用户请求到来时，业务线程确认缓存失效后，可以通过查询布隆过滤器快速判断数据是否存在，如果不存在，就不用通过查询数据库来判断数据是否存在。</li></ul><h3 id="怎么用redis分布式锁？"><a href="#怎么用redis分布式锁？" class="headerlink" title="怎么用redis分布式锁？"></a>怎么用redis分布式锁？</h3><p>基于 Redis 节点实现分布式锁时，对于加锁操作，我们需要满足三个条件。</p><ul><li>加锁包括了读取锁变量、检查锁变量值和设置锁变量值三个操作，但需要以原子操作的方式完成，所以，我们使用 SET 命令带上 NX 选项来实现加锁；</li><li>锁变量需要设置过期时间，以免客户端拿到锁后发生异常，导致锁一直无法释放，所以，我们在 SET 命令执行时加上 EX&#x2F;PX 选项，设置其过期时间；</li><li>锁变量的值需要能区分来自不同客户端的加锁操作，以免在释放锁时，出现误释放操作，所以，我们使用 SET 命令设置锁变量值时，每个客户端设置的值是一个唯一值，用于标识客户端；</li></ul><p>满足这三个条件的分布式命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_key unique_value NX PX 10000 </span><br></pre></td></tr></table></figure><ul><li>lock_key 就是 key 键；</li><li>unique_value 是客户端生成的唯一的标识，区分来自不同客户端的锁操作；</li><li>NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；</li><li>PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。</li></ul><p>而解锁的过程就是将 lock_key 键删除（del lock_key），但不能乱删，要保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，我们要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除。</p><p>可以看解锁是有两个操作，这时需要 Lua 脚本来保证解锁的原子性，因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，保证了锁释放操作的原子性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 释放锁时，先比较 unique_value 是否相等，避免锁的误释放</span><br><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class="line">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这样一来，就通过使用 SET 命令和 Lua 脚本在 Redis 单节点上完成了分布式锁的加锁和解锁。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2024/04/03/note-maven/"/>
      <url>/2024/04/03/note-maven/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Maven操作"><a href="#Maven操作" class="headerlink" title="Maven操作"></a>Maven操作</h2><ul><li>将Java源代码编译为可执行的Java程序，并在命令行窗口中运行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个名为&quot;classes&quot;的文件夹，用于存放编译后的.class文件。</span></span><br><span class="line">mkdir classes</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 javac 编译所有.java源文件，并将生成的.class文件存放在目录&quot;D:\java18\cstmgr\classes&quot;中</span></span><br><span class="line"><span class="comment">// -classpath 指定了编译时所需的类路径</span></span><br><span class="line"><span class="comment">// &quot;.&quot; :指当前目录</span></span><br><span class="line"><span class="comment">// &quot;D:\java18\cstmgr&quot; :一个自定义的Java类库路径</span></span><br><span class="line"><span class="comment">// &quot;D:\java18\cstmgr\lib\tools.jar&quot; :Java SDK提供的工具类库路径</span></span><br><span class="line">javac -classpath .;D:\java18\cstmgr;D:\java18\cstmgr\lib\tools.jar -d D:\java18\cstmgr\classes *.java</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换到目录&quot;D:\java18\cstmgr\classes&quot;</span></span><br><span class="line">cd classes</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用java命令运行主类&quot;Application&quot;</span></span><br><span class="line"><span class="comment">// -cp 指定了运行时所需的类路径</span></span><br><span class="line"><span class="comment">// &quot;D:\java18\cstmgr\lib\tools.jar&quot; :Java SDK提供的工具类库路径</span></span><br><span class="line">java -cp D:\java18\cstmgr\lib\tools.jar; Application</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows下的一个命令，用于暂停命令行窗口，等待用户输入任意键后才会关闭窗口</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><ul><li>maven导入本地仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file </span><br><span class="line">-Dfile=<span class="string">&quot;F:\Code\JavaE\newTeach\lib\opencv\opencv-contrib-4.5.3-sources.jar&quot;</span> </span><br><span class="line">-DgroupId=org.opencv </span><br><span class="line">-DartifactId=opencv-contrib </span><br><span class="line">-Dversion=4.5.3 </span><br><span class="line">-Dpackaging=jar </span><br><span class="line">-DlocalRepositoryPath=<span class="string">&quot;D:\Dev\maven\Repository&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2024/04/02/note-git/"/>
      <url>/2024/04/02/note-git/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="①-Git概念"><a href="#①-Git概念" class="headerlink" title="① Git概念"></a>① Git概念</h3><p>Git 是一个分布式版本控制工具，通常用来对软件开发过程中的源代码文件进行管理。通过Git 仓库来存储和管理这些文件，Git 仓库分为两种：①<strong>本地仓库</strong>：开发人员自己电脑上的 Git 仓库；②<strong>远程仓库</strong>：远程服务器上的 Git 仓库</p><p>​<strong>commit</strong>：提交,将本地文件和版本信息保存到本地仓库</p><p>​<strong>push</strong>：推送,将本地仓库文件和版本信息上传到远程仓库</p><p>​<strong>pull</strong>：拉取,将远程仓库文件和版本信息下载到本地仓库</p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1.png" style="zoom:70%;" /><h3 id="②-工作区、暂存区、版本库"><a href="#②-工作区、暂存区、版本库" class="headerlink" title="② 工作区、暂存区、版本库"></a>② 工作区、暂存区、版本库</h3><p>​<strong>版本库</strong>：前面看到的.git隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</p><p>​<strong>工作区</strong>：包含.git文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码</p><p>​<strong>暂存区</strong>：.git文件夹中有很多文件，其中有一个index文件就是暂存区，也可以叫做stage。暂存区是一个临时保存修改文件的地方</p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/2.jpg" style="zoom:100%;" /><h3 id="③-git工作区文件状态"><a href="#③-git工作区文件状态" class="headerlink" title="③ git工作区文件状态"></a>③ git工作区文件状态</h3><p>Git工作区中的文件存在两种状态：<code>untracked </code> 未跟踪（未被纳入版本控制）和 <code>tracked</code> 已跟踪（被纳入版本控制）</p><table><thead><tr><th align="center">Unmodified</th><th align="center">未修改状态</th><th align="center">颜色</th></tr></thead><tbody><tr><td align="center">Modified</td><td align="center">已修改状态</td><td align="center">红色</td></tr><tr><td align="center">staged</td><td align="center">已暂存状态</td><td align="center">绿色</td></tr></tbody></table><hr><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="Git全局设置"><a href="#Git全局设置" class="headerlink" title="Git全局设置"></a>Git全局设置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置用户信息</span></span><br><span class="line">git config --global user.name <span class="string">&quot;cxz206015&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;206015cxz@gmail.com&quot;</span></span><br><span class="line"><span class="comment">#查看配置信息</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><h3 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.在本地初始化一个Git仓库：</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment">#2.从远程仓库克隆（常用）:  </span></span><br><span class="line">git <span class="built_in">clone</span> &lt; url &gt;</span><br></pre></td></tr></table></figure><h3 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地仓库常用命令如下:</span></span><br><span class="line">git status <span class="comment">#查看文件状态</span></span><br><span class="line">git add&lt;file&gt;<span class="comment">#将文件的修改加入暂存区</span></span><br><span class="line">git add .                       <span class="comment">#将所有文件添加到暂存区</span></span><br><span class="line">git reset &lt;file&gt;<span class="comment">#将暂存区的文件取消暂存暂存或者切换到指定版本</span></span><br><span class="line">git reset --hard &lt;file&gt;</span><br><span class="line">git commit <span class="comment">#将暂存区的文件修改提交到版本库</span></span><br><span class="line">git commit -a <span class="comment">#提交到本地库等待push</span></span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span> &lt;file&gt;<span class="comment">#提交指定文件</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看日志</span></span><br></pre></td></tr></table></figure><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote<span class="comment">#查看远程仓库</span></span><br><span class="line">git remote -v<span class="comment">#查看版本</span></span><br><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;<span class="comment">#添加远程仓库(关联) shortname:简称</span></span><br><span class="line">git pull &lt;remote-name&gt; &lt;branch&gt;<span class="comment">#从远程仓库拉取(下载) remote-name:origin 远程仓库名 branch:分支名称 master</span></span><br><span class="line">git push orign master<span class="comment">#推送到远程仓库(上传) origin master</span></span><br><span class="line">  --allow-unrelated-histories <span class="comment">#合并git init的本地仓库和远程仓库报错，在push后面添加</span></span><br></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><p>分支是动态的，通过<strong>git init</strong> 命令创建本地仓库时会默认创建一个 <strong>master</strong> 分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch<span class="comment">#查看分支(列出所有本地分支)</span></span><br><span class="line">git branch -r<span class="comment">#列出所有远程分支</span></span><br><span class="line">git branch -a<span class="comment">#列出所有本地和远程分支</span></span><br><span class="line">git branch &lt;name&gt;<span class="comment">#创建分支</span></span><br><span class="line">git checkout &lt;name&gt;<span class="comment">#切换分支</span></span><br><span class="line">git merge &lt;name&gt;<span class="comment">#合并分支 编辑窗口按&quot;i&quot;可以添加&quot;message&quot;，ESC退出，再输入&quot;:wq&quot;保存退出</span></span><br><span class="line"><span class="comment">#合并相同文件会发生冲突:先解决冲突，git add结束合并分支，再git commit -m &quot;message&quot; &lt;file&gt;提交，若出现&quot;cannot do a #partial commit during a merge&quot;，则在其后面加上&quot;-i&quot;，然后git push origin master推送到远程仓库实现合并</span></span><br></pre></td></tr></table></figure><h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><p>标签是静态的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag<span class="comment">#列出已有的标签</span></span><br><span class="line">git tag &lt;name&gt;<span class="comment">#创建标签</span></span><br><span class="line">git checkout -b &lt;branch&gt; &lt;name&gt;<span class="comment">#检出标签 branch:分支名 name:标签名</span></span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始：检查git配置 (可不做)</span></span><br><span class="line">git config --list<span class="comment"># 查看配置信息</span></span><br><span class="line">git config --global core.editor vim                     <span class="comment"># 设置默认编辑器为vim（git默认用nano）</span></span><br><span class="line">git config core.ignorecase <span class="literal">false</span>                        <span class="comment"># 设置大小写敏感</span></span><br><span class="line">git config --global user.name <span class="string">&quot;YOUR NAME&quot;</span>  <span class="comment"># 设置用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;YOUR EMAIL ADDRESS&quot;</span><span class="comment"># 设置邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步：初始化一个仓库</span></span><br><span class="line">git init  <span class="comment"># 初始化本地版本库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt; <span class="comment"># 克隆远程版本库</span></span><br><span class="line">git remote add origin git@github.com:用户名/仓库名.git <span class="comment"># 配置远程git版本库</span></span><br><span class="line">git pull origin master                                      <span class="comment"># 下载代码及快速合并 </span></span><br><span class="line">git fetch origin                                            <span class="comment"># 从远程库获取代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：查看状态 (可不做)</span></span><br><span class="line">git status                     <span class="comment"># 查看git当前状态</span></span><br><span class="line">git <span class="built_in">log</span>                             <span class="comment"># 查看提交历史</span></span><br><span class="line">git diff                        <span class="comment"># 查看变更内容</span></span><br><span class="line">git branch                          <span class="comment"># 显示所有分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步：修改文件 (可不做)</span></span><br><span class="line">git <span class="built_in">mv</span> &lt;old&gt; &lt;new&gt;              <span class="comment"># 文件改名</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;file&gt;                   <span class="comment"># 删除文件</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt;          <span class="comment"># 停止跟踪文件但不删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步：切换提交分支 (可不做)</span></span><br><span class="line">git branch<span class="comment">#查看分支 (列出所有本地分支)</span></span><br><span class="line">git branch -r<span class="comment">#列出所有远程分支</span></span><br><span class="line">git branch -a<span class="comment">#列出所有本地和远程分支</span></span><br><span class="line">git branch &lt;name&gt;<span class="comment">#创建分支</span></span><br><span class="line">git checkout &lt;name&gt;<span class="comment">#切换分支</span></span><br><span class="line">git merge &lt;name&gt;<span class="comment">#合并分支 编辑窗口按&quot;i&quot;可以添加&quot;message&quot;，ESC退出，再输入&quot;:wq&quot;保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步：保存和提交</span></span><br><span class="line">git add .                       <span class="comment"># 跟踪所有改动过的文件</span></span><br><span class="line">git add &lt;file&gt;                  <span class="comment"># 跟踪指定的文件</span></span><br><span class="line"></span><br><span class="line">git checkout master                 <span class="comment"># 切换到master分支</span></span><br><span class="line">git switch dev<span class="comment"># 切换到dev分支</span></span><br><span class="line">git checkout -b dev                 <span class="comment"># 创建并切换到dev分支</span></span><br><span class="line"></span><br><span class="line">git commit <span class="comment"># 将暂存区的文件修改提交到版本库</span></span><br><span class="line">git commit -a <span class="comment"># 提交到本地库等待push</span></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span>  <span class="comment"># 提交所有更新过的文件备注为&quot;first commit&quot;</span></span><br><span class="line">git commit -am <span class="string">&quot;first commit&quot;</span><span class="comment"># 提交锁头</span></span><br><span class="line">git commit --amend              <span class="comment"># 修改最后一次提交。即没有增加新的提交记录，相当于将当前的修改追加到上一次的提交中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步：提交到远程仓库</span></span><br><span class="line">git push<span class="comment"># 提交到远程仓库</span></span><br><span class="line">git push origin master              <span class="comment"># 上传代码及快速合并</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/3.jpg" style="zoom:67%;" /><p><strong>全部指令</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">git init                                                  <span class="comment"># 初始化本地git仓库（创建新仓库）</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span>                       <span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.com&quot;</span>              <span class="comment"># 配置邮件</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span>                         <span class="comment"># git status等命令自动着色</span></span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy                    <span class="comment"># remove  proxy configuration on git</span></span><br><span class="line">git <span class="built_in">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class="comment"># clone远程仓库</span></span><br><span class="line">git status                                                <span class="comment"># 查看当前版本状态（是否修改）</span></span><br><span class="line">git add xyz                                               <span class="comment"># 添加xyz文件至index</span></span><br><span class="line">git add .                                                 <span class="comment"># 增加当前子目录下所有更改过的文件至index</span></span><br><span class="line">git commit -m <span class="string">&#x27;xxx&#x27;</span>                                       <span class="comment"># 提交</span></span><br><span class="line">git commit --amend -m <span class="string">&#x27;xxx&#x27;</span>                               <span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit -am <span class="string">&#x27;xxx&#x27;</span>                                      <span class="comment"># 将add和commit合为一步</span></span><br><span class="line">git <span class="built_in">rm</span> xxx                                                <span class="comment"># 删除index中的文件</span></span><br><span class="line">git <span class="built_in">rm</span> -r *                                               <span class="comment"># 递归删除</span></span><br><span class="line">git <span class="built_in">log</span>                                                   <span class="comment"># 显示提交日志</span></span><br><span class="line">git <span class="built_in">log</span> -1                                                <span class="comment"># 显示1行日志 -n为n行</span></span><br><span class="line">git <span class="built_in">log</span> -5</span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>                                            <span class="comment"># 显示提交日志及相关变动文件</span></span><br><span class="line">git <span class="built_in">log</span> -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="comment"># 显示某个提交的详细内容</span></span><br><span class="line">git show dfb02                                            <span class="comment"># 可只用commitid的前几位</span></span><br><span class="line">git show HEAD                                             <span class="comment"># 显示HEAD提交日志</span></span><br><span class="line">git show HEAD^                                            <span class="comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本   ^5为上5个版本</span></span><br><span class="line">git tag                                                   <span class="comment"># 显示已存在的tag</span></span><br><span class="line">git tag -a v2.0 -m <span class="string">&#x27;xxx&#x27;</span>                                  <span class="comment"># 增加v2.0的tag</span></span><br><span class="line">git show v2.0                                             <span class="comment"># 显示v2.0的日志及详细内容</span></span><br><span class="line">git <span class="built_in">log</span> v2.0                                              <span class="comment"># 显示v2.0的日志</span></span><br><span class="line">git diff                                                  <span class="comment"># 显示所有未添加至index的变更</span></span><br><span class="line">git diff --cached                                         <span class="comment"># 显示所有已添加index但还未commit的变更</span></span><br><span class="line">git diff HEAD^                                            <span class="comment"># 比较与上一个版本的差异</span></span><br><span class="line">git diff HEAD -- ./lib                                    <span class="comment"># 比较与HEAD版本lib目录的差异</span></span><br><span class="line">git diff origin/master..master                            <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></span><br><span class="line">git diff origin/master..master --<span class="built_in">stat</span>                     <span class="comment"># 只显示差异的文件，不显示具体内容</span></span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></span><br><span class="line">git branch                                                <span class="comment"># 显示本地分支</span></span><br><span class="line">git branch --contains 50089                               <span class="comment"># 显示包含提交50089的分支</span></span><br><span class="line">git branch -a                                             <span class="comment"># 显示所有分支</span></span><br><span class="line">git branch -r                                             <span class="comment"># 显示所有原创分支</span></span><br><span class="line">git branch --merged                                       <span class="comment"># 显示所有已合并到当前分支的分支</span></span><br><span class="line">git branch --no-merged                                    <span class="comment"># 显示所有未合并到当前分支的分支</span></span><br><span class="line">git branch -m master master_copy                          <span class="comment"># 本地分支改名</span></span><br><span class="line">git checkout -b master_copy                               <span class="comment"># 从当前分支创建新分支master_copy并检出</span></span><br><span class="line">git checkout -b master master_copy                        <span class="comment"># 上面的完整版</span></span><br><span class="line">git checkout features/performance                         <span class="comment"># 检出已存在的features/performance分支</span></span><br><span class="line">git checkout --track hotfixes/BJVEP933                    <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class="line">git checkout v2.0                                         <span class="comment"># 检出版本v2.0</span></span><br><span class="line">git checkout -b devel origin/develop                      <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class="line">git checkout -- README                                    <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class="line">git merge origin/master                                   <span class="comment"># 合并远程master分支至当前分支</span></span><br><span class="line">git cherry-pick ff44785404a8e                             <span class="comment"># 合并提交ff44785404a8e的修改</span></span><br><span class="line">git push origin master                                    <span class="comment"># 将当前分支push到远程master分支</span></span><br><span class="line">git push origin :hotfixes/BJVEP933                        <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支</span></span><br><span class="line">git push --tags                                           <span class="comment"># 把所有tag推送到远程仓库</span></span><br><span class="line">git fetch                                                 <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line">git fetch --prune                                         <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line">git pull origin master                                    <span class="comment"># 获取远程分支master并merge到当前分支</span></span><br><span class="line">git <span class="built_in">mv</span> README README2                                     <span class="comment"># 重命名文件README为README2</span></span><br><span class="line">git reset --hard HEAD                                     <span class="comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933                           <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></span><br><span class="line">git branch -D hotfixes/BJVEP933                           <span class="comment"># 强制删除分支hotfixes/BJVEP933</span></span><br><span class="line">git ls-files                                              <span class="comment"># 列出git index包含的文件</span></span><br><span class="line">git show-branch                                           <span class="comment"># 图示当前分支历史</span></span><br><span class="line">git show-branch --all                                     <span class="comment"># 图示所有分支历史</span></span><br><span class="line">git whatchanged                                           <span class="comment"># 显示提交历史对应的文件修改</span></span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></span><br><span class="line">git ls-tree HEAD                                          <span class="comment"># 内部命令：显示某个git对象</span></span><br><span class="line">git rev-parse v2.0                                        <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH</span></span><br><span class="line">git reflog                                                <span class="comment"># 显示所有提交，包括孤立节点</span></span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               <span class="comment"># 显示master分支昨天的状态</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&#x27;%h %s&#x27;</span> --graph                   <span class="comment"># 图示提交日志</span></span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 <span class="comment"># 暂存当前修改，将所有至为HEAD状态</span></span><br><span class="line">git stash list                                            <span class="comment"># 查看所有暂存</span></span><br><span class="line">git stash show -p stash@&#123;0&#125;                               <span class="comment"># 参考第一次暂存</span></span><br><span class="line">git stash apply stash@&#123;0&#125;                                 <span class="comment"># 应用第一次暂存</span></span><br><span class="line">git grep <span class="string">&quot;delete from&quot;</span>                                    <span class="comment"># 文件中搜索文本“delete from”</span></span><br><span class="line">git grep -e <span class="string">&#x27;#define&#x27;</span> --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure><hr><h2 id="忽略提交文件-gitignore"><a href="#忽略提交文件-gitignore" class="headerlink" title="忽略提交文件 .gitignore"></a>忽略提交文件 <code>.gitignore</code></h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitignore文件</span></span><br><span class="line"><span class="comment"># maven #</span></span><br><span class="line">target</span><br><span class="line"></span><br><span class="line"><span class="comment"># log #</span></span><br><span class="line">logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># windows #</span></span><br><span class="line">Thumbs.db</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac #</span></span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line"><span class="comment"># eclipse #</span></span><br><span class="line">.settings</span><br><span class="line">.project</span><br><span class="line">.classpath</span><br><span class="line">.log</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"><span class="comment"># idea #</span></span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.ear</span><br><span class="line">/target</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2024/04/01/note-java/"/>
      <url>/2024/04/01/note-java/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前后端传参"><a href="#前后端传参" class="headerlink" title="前后端传参"></a>前后端传参</h2><h3 id="三种传参方式"><a href="#三种传参方式" class="headerlink" title="三种传参方式"></a>三种传参方式</h3><ul><li><p><strong>x-www-form-urlencoded</strong>：只能上传键值对，并且键值对都是间隔分开的</p><p><strong>multipart&#x2F;form-data</strong>：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；</p></li><li><p><strong>x-www-form-urlencoded</strong>： Post传参的默认格式，使用js中URLencode转码方法。包括将name、value中的空格替换为加号；将非ascii字符做百分号编码；将input的name、value用‘&#x3D;’连接，不同的input之间用‘&amp;’连接。这种post格式跟get的区别在于：get把转换、拼接完的字符串用‘?’直接与表单的action连接作为URL使用，所以请求体里没有数据；而post把转换、拼接后的字符串放在了请求体里，不会在浏览器的地址栏显示，因而更安全一些。对于一段utf8编码的字节，用application&#x2F;x-www-form-urlencoded传输其中的ascii字符没有问题，但对于非ascii字符传输效率就很低了，因此在传很长的字节（如文件）时应用multipart&#x2F;form-data格式。smtp等协议也使用或借鉴了此格式。</p><p><strong>multipart&#x2F;form-data</strong>：将表单中的每个input转为了一个由boundary分割的小格式，没有转码，直接将utf8字节拼接到请求体中，在本地有多少字节实际就发送多少字节，极大提高了效率，适合传输长字节。</p><p><strong>json</strong>：现在很多时候也把它作为请求头，用来告诉服务端消息主体是序列化的JSON字符串，除了低版本的IE，基本都支持。除了低版本的IE都支持JSON.stringify（）的方法，服务端也有处理JSON的函数，使用JSON不会有任何麻烦。</p></li><li><p>当传入参数是x-www-form-urlencoded，接收参数@RequestBody+ String&#x2F;Map&#x2F;LinkedHashMap即可接收成功</p></li></ul><h3 id="post和get请求"><a href="#post和get请求" class="headerlink" title="post和get请求"></a>post和get请求</h3><ul><li>发送get请求将参数通过？拼接在url后面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/order/userPage?page=&quot;</span>+page+<span class="string">&quot;&amp;pageSize=&quot;</span>+pageSize,    <span class="comment">//请求的url地址  </span></span><br><span class="line">        cache: <span class="string">&quot;false&quot;</span>,   <span class="comment">//设置为false将不会从浏览器中加载请求信息</span></span><br><span class="line">        async: <span class="string">&quot;true&quot;</span>,    <span class="comment">//true所有请求均为异步请求</span></span><br><span class="line">        dataType: <span class="string">&quot;json&quot;</span>, <span class="comment">//请求返回数据的格式</span></span><br><span class="line">        type:<span class="string">&quot;get&quot;</span>,      <span class="comment">//请求方式</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面等同于==&gt;&gt;</span></span><br><span class="line">async <span class="title function_">initData</span><span class="params">()</span>&#123;</span><br><span class="line">   paging: &#123;</span><br><span class="line">      page: <span class="number">1</span>,</span><br><span class="line">      pageSize: <span class="number">5</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">const</span> <span class="variable">res</span> <span class="operator">=</span> await <span class="title function_">orderPagingApi</span><span class="params">(<span class="built_in">this</span>.paging)</span> </span><br><span class="line">&#125;</span><br><span class="line">function <span class="title function_">orderPagingApi</span><span class="params">(data)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/order/userPage&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="comment">//请求参数</span></span><br><span class="line">        params: &#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面等同于==&gt;&gt;</span></span><br><span class="line">async <span class="title function_">initData</span><span class="params">()</span>&#123;</span><br><span class="line">   paging: &#123;</span><br><span class="line">      page: <span class="number">1</span>,</span><br><span class="line">      pageSize: <span class="number">5</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">const</span> <span class="variable">res</span> <span class="operator">=</span> await <span class="title function_">orderPagingApi</span><span class="params">(<span class="built_in">this</span>.paging)</span> </span><br><span class="line">&#125;</span><br><span class="line">function <span class="title function_">orderPagingApi</span><span class="params">(data)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/order/userPage&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 后端接收参数   @RequestParam 可加可不加</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;xxx&gt; <span class="title function_">userPage</span><span class="params">(<span class="meta">@RequestParam(&quot;page&quot;)</span>Integer page,Integer pageSize)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>将参数拼接在url中，后台通过占位符接收参数  &#x2F;{id}，前端传递参数直接将参数拼在url中，如 &#x2F;xxx&#x2F;1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">async <span class="title function_">initData</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">res</span> <span class="operator">=</span> await <span class="title function_">addressFindOneApi</span><span class="params">(params.id)</span></span><br><span class="line">&#125;</span><br><span class="line">function <span class="title function_">addressFindOneApi</span><span class="params">(id)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: `/addressBook/$&#123;id&#125;`,</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端接收参数</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/xxx/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;xxx&gt; <span class="title function_">backList</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// @PathVariable:需要接收前端传递的参数必须要加上这个注解</span></span><br><span class="line"><span class="comment">// @PathVariable(name=&quot;&quot;)和@PathVariable(value=&quot;&quot;)都可以</span></span><br><span class="line"><span class="comment">// 可以@RequestMapping或@GetMapping。如果用@RequestMapping就应为：@RequestMapping(value = &quot;xxx/&#123;id&#125;&quot;, method= RequestMethod.GET)</span></span><br></pre></td></tr></table></figure><ul><li>通过post提交方式将form表单中的数据序列化后传递到后台</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">async <span class="title function_">initData</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">res</span> <span class="operator">=</span>await <span class="title function_">formAjax</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">function <span class="title function_">formAjax</span><span class="params">()</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/login&quot;</span>,  </span><br><span class="line">        type: <span class="string">&quot;post&quot;</span>, </span><br><span class="line">        data: $(<span class="string">&quot;#form&quot;</span>).serialize(),  <span class="comment">// 对id为form的表单数据进行序列化并传递到后台</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//后端接收参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="comment">//form表单的数据与User实体类的数据相对应</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span> <span class="params">(User user)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>通过post提交方式将form表单的类型是 json</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">async <span class="title function_">initData</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">res</span> <span class="operator">=</span>await <span class="title function_">formAjax</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function <span class="title function_">formAjax</span><span class="params">()</span> &#123;</span><br><span class="line">     $.ajax(&#123;</span><br><span class="line">       url: <span class="string">&quot;/login&quot;</span>, </span><br><span class="line">       type: <span class="string">&quot;post&quot;</span>, </span><br><span class="line">       contentType: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后端接收参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="comment">//form表单的数据与User实体类的数据相对应</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span> <span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>前台将普通数据转换为json</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后台接收参数 map或对应实体</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/xxx/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;xxx&gt; <span class="title function_">userPage</span><span class="params">(<span class="meta">@RequesBody</span> Map&lt;Integer,Integer&gt; map)</span>&#123;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">page</span> <span class="operator">=</span> map.get(<span class="string">&quot;page&quot;</span>);        </span><br><span class="line">      <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> map.get(<span class="string">&quot;pageSize&quot;</span>);    </span><br><span class="line">&#125;async <span class="title function_">initData</span><span class="params">()</span>&#123;</span><br><span class="line">   paging: &#123;</span><br><span class="line">      page: <span class="number">1</span>,</span><br><span class="line">      pageSize: <span class="number">5</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">const</span> <span class="variable">res</span> <span class="operator">=</span> await <span class="title function_">orderPagingApi</span><span class="params">(<span class="built_in">this</span>.paging)</span> </span><br><span class="line">&#125;</span><br><span class="line">function <span class="title function_">orderPagingApi</span><span class="params">(data)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/order/userPage&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>, </span><br><span class="line">         data: JSON.stringify(data),</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后台接收参数 map或对应实体</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/xxx/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;xxx&gt; <span class="title function_">userPage</span><span class="params">(<span class="meta">@RequesBody</span> Map&lt;Integer,Integer&gt; map)</span>&#123;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">page</span> <span class="operator">=</span> map.get(<span class="string">&quot;page&quot;</span>);        </span><br><span class="line">      <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> map.get(<span class="string">&quot;pageSize&quot;</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接收参数出错案例</p><p>Cannot deserialize instance of <code>java.lang.String</code> out of START_OBJECT token，请求体中的 user 被认为是一个Object对象，不能用String进行解析</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改前</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/regiest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; map)</span> &#123;&#125;</span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/regiest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,Object&gt; map)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>前端传参 {params: params} ,后端用 @RequestParams(“id”) 接参</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端发送数据</span></span><br><span class="line"><span class="built_in">this</span>.$axios</span><br><span class="line">       .delete(<span class="string">&quot;login/deleteUserInfo&quot;</span>, </span><br><span class="line">        &#123; </span><br><span class="line">    params: &#123;</span><br><span class="line">               userId: <span class="built_in">this</span>.id</span><br><span class="line">          &#125; </span><br><span class="line">&#125;)</span><br><span class="line">       .then(</span><br><span class="line">         <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">         type: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">         message: <span class="string">&quot;删除用户信息成功&quot;</span>,</span><br><span class="line">      &#125;))</span><br><span class="line">       .<span class="keyword">catch</span>(</span><br><span class="line">        <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">        type: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        message: <span class="string">&quot;删除用户信息失败&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="comment">//后端接收数据</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">deleteUserInfo</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> String userId)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>前端通过 {data : param} 传参，后端通过 @RequestBody 接参</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端</span></span><br><span class="line">deleteMessage() &#123;</span><br><span class="line">    axios.delete(<span class="string">&#x27;login/deleteUserInfo&#x27;</span>, </span><br><span class="line">                 &#123; data : &#123;</span><br><span class="line">                     userId: <span class="built_in">this</span>.id</span><br><span class="line">                 &#125;&#125;).then((response) =&gt; &#123;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后端</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;deleteUserInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">deleteUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> String userId)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>el-select 数据回显问题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- :value=&#x27;1&#x27; v-model=&quot;1&quot;（数值 1）则匹配(number=number string=string类型要一致),显示label,否则显示value--&gt;</span><br><span class="line">&lt;el-form-item label=&quot;角色名称：&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">&lt;el-select</span><br><span class="line">        placeholder=&quot;请选择角色名称&quot;</span><br><span class="line">        v-model=&quot;form.roleId&quot;</span><br><span class="line">        :label-width=&quot;formLabelWidth&quot;</span><br><span class="line">        style=&quot;width: 200px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">&lt;el-option</span><br><span class="line">            v-for=&quot;item in roleInfo&quot;</span><br><span class="line">            :key=&quot;item.value&quot;</span><br><span class="line">            :label=&quot;item.roleName&quot;</span><br><span class="line">            :value=&quot;item.roleId&quot;</span><br><span class="line">&gt;            </span><br><span class="line">&lt;/el-option&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h2><h3 id="ajax请求规范"><a href="#ajax请求规范" class="headerlink" title="ajax请求规范"></a>ajax请求规范</h3><ul><li>axios普通get请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="comment">//后端接口路径</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line">    <span class="comment">//注意这里使用的是params,该属性负责把属性名和属性值添加到url后面，一般和get配合使用，但也能和post配合使用</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="comment">//attributeName为属性名，value为属性值</span></span><br><span class="line">      <span class="attr">attributeName</span>:value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//response是一个返回的promise对象，该注释所在的这行一般对该promise对象进行处理从而获取数据</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//对error进行处理</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通get请求时对应的接收</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(value = &quot;attributeName&quot;)</span> String attributeName)</span>&#123;</span><br><span class="line"><span class="comment">//axios使用params进行传值，而Java就需要用到@RequestParam来接收params的值，value后的值要对应上params里的属性名,即attributeName，若不写，则value默认为String后的attributeName这一属性名，而且一个请求能拥有多个@RequestParam</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>axios使用 restful 规范的get请求</li></ul><blockquote><p>路径后面有反斜杠’&#x2F; ‘，不要写漏了，不然value就会变成路径的一部分，请求路径就会变成&#x2F;xxx后面跟上value的值，导致404。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="comment">//后端接口路径+属性值</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/xxx/&#x27;</span>+value,</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//response是一个返回的promise对象，该注释所在的这行一般对该promise对象进行处理从而获取数据</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//对error进行处理</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/xxx/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String()</span> attributeName)&#123;</span><br><span class="line"><span class="comment">//axios使用restful的方式进行传值，而Java就需要用到@PathVariable来接收url后的值，/xxx/&#123;id&#125;里的id必须和@PathVariable(&quot;id&quot;)里的id名字一致，而且一个请求能拥有多个@PathVariable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>axios使用post+params请求</li></ul><blockquote><p>除了method的请求方式和接收请求用@PostMapping，其他都和普通的get请求一致</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="comment">//后端接口路径</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line">    <span class="comment">//注意这里使用的是params,该属性负责把属性名和属性值添加到url后面，一般和get配合使用，但也能和post配合使用</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="comment">//attributeName为属性名，value为属性值</span></span><br><span class="line">      <span class="attr">attributeName</span>:value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//response是一个返回的promise对象，该注释所在的这行一般对该promise对象进行处理从而获取数据</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//对error进行处理</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(value = &quot;attributeName&quot;)</span> String attributeName)</span>&#123;</span><br><span class="line">    <span class="comment">//axios使用params进行传值，而Java就需要用到@RequestParam来接收params的值，value后的值要对应上params里的属性名，即attributeName，若不写，则value默认为String后的attributeName这一属性名，而且一个请求能拥有多个@RequestParam</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>axios使用post+data请求</li></ul><blockquote><p>注意：obj对象里的属性名要和people实体类里的属性名一样，因为obj对象里的属性名与people实体类里的属性名匹配时，大小写敏感，即区分大小写。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法名为test,传入js对象obj,js对象放属性和属性值,例如obj:&#123;userName:张三，age:18&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="comment">//后端接口路径</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line">    <span class="comment">//注意这里是data,该属性负责把属性名和属性值添加到请求体里面，一般和post配合使用,而且不要用&#123;&#125;把obj对象包裹起来，不然后端无法解析前端传过来的JSON</span></span><br><span class="line">    <span class="attr">data</span>: obj</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//response是一个返回的promise对象，该注释所在的这行一般对该promise对象进行处理从而获取数据</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//对error进行处理</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应的People实体类</span></span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping(&quot;/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="meta">@RequestBody</span> People people)</span>&#123;</span><br><span class="line">    <span class="comment">//axios使用post+data进行传值，而Java就需要用到@RequestBody来接收data的值，obj里的属性名与people实体类的属性名相同，obj里的属性名和people的属性名就能进行动态绑定从而把obj的属性值set进people实体类里，而一个请求只能拥有一个@RequestBody；注意！！！obj对象里的属性名一定得和people实体类里的属性名一模一样，因为obj对象里的属性名与people实体类里的属性名匹配时， 大小写敏感，即区分大小写</span></span><br></pre></td></tr></table></figure><h3 id="传参问题"><a href="#传参问题" class="headerlink" title="传参问题"></a>传参问题</h3><ul><li><p>@RequestBody传参</p><p>当接口默认使用@RequestBody传参时，每一个请求必须通过实体对象进行传参，不能使用form-data表单的方式进行传参。</p><p><strong>解决方案有两种：</strong></p><p>① 改成json方式提交；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;knowledgeSort&quot;</span> <span class="punctuation">:</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;knowledgeParentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;knowledgeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;chapterId&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>​② 把接口的@RequestBody 注解去掉;</p><ul><li><p>Postman传参方式</p><p>第一种是使用 raw：</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/1669888061090.jpg" alt="img"></p><p>第二种是使用 form-data：</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/20180515104528896.png" alt="img"></p><p>第三种是直接使用变量的方式：</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/20180515104010153.png" alt="img"></p></li></ul><hr><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志框架和日志门面"><a href="#日志框架和日志门面" class="headerlink" title="日志框架和日志门面"></a>日志框架和日志门面</h3><ul><li><p>常见的日志框架</p><p><strong>Log4j</strong>：Apache Log4j 是一个广泛使用的日志框架，它提供了丰富的配置选项和多种输出目标。</p><p><strong>Log4j2</strong>: Apache Log4j 2 是 Apache Software Foundation 开发的日志框架，它是 Log4j 的升级版本，提供了更好的性能和功能。</p><p><strong>Logback</strong>：Logback 是由 Log4j 的创始人设计的日志框架，旨在取代 Log4j。它在性能和灵活性方面表现出色。</p><p><strong>JUL</strong>： (Java Util Logging) JUL 是 Java 平台自带的日志框架，位于<code>java.util.logging</code>包下。它是标准的 Java 日志框架，使用简单，但功能相对较弱。</p></li><li><p>常见的日志门面</p><p><strong>SLF4J：</strong>常见的日志门面，它提供了统一的日志 API，并允许你在项目中使用 SLF4J 的接口，而不用直接依赖于具体的日志实现。</p><p><strong>ACL：</strong>(Apache Commons Logging)常见的日志门面，类似于 SLF4J，它允许开发者使用通用的 API 来进行日志记录。</p></li></ul><blockquote><p><strong>注意</strong>：日志门面是一个抽象层，它提供了一组通用的日志 API，可以将这些 API 与不同的日志框架进行绑定。这样，你可以在项目中使用统一的日志 API，而无需直接和特定的日志框架耦合。根据项目需求和个人喜好，可以选择使用不同的日志门面和底层的日志实现。其中，SLF4J 是目前使用最广泛的日志门面之一，并且很多日志框架都支持与 SLF4J 的集成</p></blockquote><h3 id="日志如何使用"><a href="#日志如何使用" class="headerlink" title="日志如何使用"></a>日志如何使用</h3><p>两个步骤：<strong>引入依赖</strong>和<strong>配置日志框架</strong></p><ul><li><p>引入依赖：</p><p>首先，你需要在项目的构建工具（如Maven、Gradle等）中添加对日志门面和具体日志框架的依赖。以 SLF4J 和 Logback 为例，在 Maven 中的依赖配置如下：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SLF4J 日志门面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Logback 日志框架 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>配置日志框架：</p><p>日志框架的配置方式因框架而异。对于 Logback，需要创建一个 <code>logback.xml</code>配置文件，并放在项目的 classpath 路径下( 通常是<code>src/main/resources</code> 目录下)，以下是一个简单的 Logback 配置示例，用于将日志输出到控制台：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logback.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述配置定义了一个输出到控制台的 Appender，并将根日志记录器的级别设置为 <code>debug</code>，这意味着会记录所有级别的日志信息。</p><p>一旦你完成了依赖的引入和日志框架的配置，你就可以在项目中使用日志门面的 API（例如 SLF4J 提供的 <code>Logger</code> 接口）来记录日志。根据日志门面的 API 设计，你可以使用不同的日志级别（如 <code>debug</code>、<code>info</code>、<code>warn</code>、<code>error</code> 等）和相应的日志方法来记录不同级别的日志信息。</p><p>例如，在代码中使用 SLF4J 来记录日志：当项目运行时，具体的日志输出将由你在配置文件中指定的 Appender 和日志级别来决定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyClass.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;This is a debug message.&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;This is an info message.&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;This is a warning message.&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;This is an error message.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在项目中集成日志门面和日志框架，首先引入相应的依赖（日志门面和具体日志框架的实现），然后配置日志框架以指定日志输出的方式和级别。在代码中，你可以使用日志门面的 API 来记录日志。这样可以在不改变代码的情况下切换不同的日志框架，以满足项目的日志需求</p></blockquote><hr><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>try-with-resource语法</p><p>后续补充细节…</p><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为什么推荐第一种不推荐第二种</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>()</span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>()</span><br><span class="line"><span class="comment">// 体现了java语言的多态性</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure><ul><li><p>java是面向对象编程，面向对象一个重要的原则就是“依赖倒置原则”。依赖抽象（接口），而非具体（实现类）</p><p>List是接口，ArrayList是实现类，<code>它允许list可以轻松地在接口的不同实现之间切换</code></p></li><li><p>List的实现类包括List，Vector，LinkedList , Stack等等，使用<code>List list = new ArrayList()</code>将来如果需要改成线程安全的<code>Vector</code>，只需要直接把<code>ArrayList</code>改成<code>Vector</code>就行了。即<code>List list = new Vector()</code>这种方法实现解耦合，大大提高代码使用的灵活性和通用性，并且在暴露公共接口的时候尤其有用</p></li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map是java中的接口，Map.Entry是Map的一个内部接口。常用方法：<code>keySet()</code> 和 <code>entrySet()</code></p><p>​<strong>keySet()方法</strong>：返回值是Map中key值的集合</p><p>​<strong>entrySet()方法</strong>：返回值是一个Set集合，此集合的类型为<code>Map.Entry</code>，它是Map声明的一个内部接口，此接口为泛型，定义为<code>Entry&lt;K,V&gt;</code>。它表示 Map中的一个实体即一个<code>key-value</code>对。接口中有 <code>getKey()</code>，<code>getValue()</code>等方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">map.put(“key1”, “value1”);</span><br><span class="line">map.put(“key2”, “value2”);</span><br><span class="line">map.put(“key3”, “value3”);</span><br></pre></td></tr></table></figure><blockquote><p>第一种：普遍使用，二次取值。即通过 <code>Map.keySet()</code> 遍历key和value</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二种：通过 <code>Map.entrySet</code> 使用 <code>iterator</code> 遍历key和value</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三种：推荐，尤其是容量大时，即通过 <code>Map.entrySet</code> 遍历key和value</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 第四种：通过Map.values()遍历所有的value，但不能遍历key</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Iterator和Iterable的区别"><a href="#Iterator和Iterable的区别" class="headerlink" title="Iterator和Iterable的区别"></a>Iterator和Iterable的区别</h3><blockquote><p>为什么Collection接口要继承于Iterable接口，而不是Iterator接口？</p></blockquote><ul><li><p>在jdk 1.5以后，引入了 <code>Iterable</code> ，使用 <code>foreach</code> 语句必须使用 <code>Iterable</code> 类</p></li><li><p>Java设计者让 Collection 继承于 <code>Iterable</code> 而不是 <code>Iterator</code> 接口</p><p><code>Iterable</code> 的子类是 Collection，Collection 的子类是List，Set等，这些是数据结构或者说放数据的地方</p><p><code>Iterator</code> 是定义了迭代逻辑的对象，让迭代逻辑和数据结构分离开来，这样的好处是可以在一种数据结构上实现多种迭代逻辑</p></li><li><p>更重要的一点是：每一次调用 <code>Iterable</code> 的 <code>Iterator()</code> 方法，都会返回一个从头开始的 <code>Iterator</code> 对象，各个 <code>Iterator</code> 对象之间不会相互干扰，这样保证了可以同时对一个数据结构进行多个遍历。这是因为每个循环都是用了独立的迭代器 <code>Iterator</code> 对象</p></li></ul><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/895904-20160509230146280-371593991.png" alt="img" style="zoom: 33%;" /><hr><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><ul><li>根据条件映射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().map(条件).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>根据条件遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().foreach(条件).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>根据条件分组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.groupingBy(条件));</span><br></pre></td></tr></table></figure><ul><li>根据条件排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(条件).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>根据条件筛选、</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().filter(条件).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>根据条件缩减</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().reduce(条件)</span><br></pre></td></tr></table></figure><ul><li>根据条件比较大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.stream().max(Comparator.comparing(条件));</span><br><span class="line">list.stream().min(Comparator.comparing(条件));</span><br></pre></td></tr></table></figure><ul><li>查询集合第一个元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.stream().filter(条件).findFirst();</span><br><span class="line">list.stream().filter(条件).findAny();</span><br></pre></td></tr></table></figure><ul><li>查询集合元素数量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().filter(条件).count();</span><br></pre></td></tr></table></figure><ul><li>跳过前m个数据，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().skip(m).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>限制获得前n个数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().limit(n).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>去重</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>合并，去重</li></ul><blockquote><p>合并的stream类型必须相同,只能两两合并</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>加字符  “,”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream().map().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li>匹配：使用<code>matches()</code>方法来判断一个字符串是否与正则表达式匹配。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a*b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;aab&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isMatch</span> <span class="operator">=</span> input.matches(regex);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>搜索与替换：使用<code>Pattern</code>和<code>Matcher</code>类来进行搜索和替换操作。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\bcat\\b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;I have a cat and a dog.&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(input);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> matcher.find(); <span class="comment">// 搜索匹配项  true</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replacedInput</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;dog&quot;</span>); <span class="comment">// 替换匹配项 I have a dog and a dog.</span></span><br></pre></td></tr></table></figure><ul><li>分割字符串：使用<code>split()</code>方法来根据正则表达式将字符串分割成数组。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\s+&quot;</span>; <span class="comment">// 表示一个或多个空格字符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;Hello     World&quot;</span>;</span><br><span class="line">String[] parts = input.split(regex); <span class="comment">//[&quot;Hello&quot;,&quot;World&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>提取内容：使用分组（Grouping）来提取正则表达式中的特定部分。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)&quot;</span>; <span class="comment">// 匹配日期格式（YYYY-MM-DD）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;Today is 2021-09-30&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(input);</span><br><span class="line"><span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>); <span class="comment">// &quot;2021&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>); <span class="comment">// &quot;09&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> matcher.group(<span class="number">3</span>); <span class="comment">// &quot;30&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> matcher,group();<span class="comment">// &quot;2021-09-30&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java中的反斜杠 <code>\</code> 在字符串中需要进行转义，因此正则表达式中的反斜杠需要使用两个反斜杠 <code>\\</code> 进行表示。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*:匹配前一个元素零次或多次。</span><br><span class="line">.:匹配任意单个字符（除了换行符 \n）。</span><br><span class="line">+:匹配前一个元素一次或多次。</span><br><span class="line">?:匹配前一个元素零次或一次。</span><br><span class="line">\b:当它是由单词边界包围时才进行匹配 如上例</span><br><span class="line">\s:用于匹配任意连续的空白字符。包括空格、制表符和换行符</span><br><span class="line">\d*:匹配任意数量的数字字符（<span class="number">0</span> 次或多次）。</span><br><span class="line">\.:匹配实际的点号字符。</span><br><span class="line">\d+:匹配至少一个数字字符。</span><br><span class="line">\?:匹配实际的问号字符。</span><br></pre></td></tr></table></figure><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><ul><li>将字符串转成无 [] 的字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.strip(collect.toString(), <span class="string">&quot;[]&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>数字和字母转换<ul><li>For inputString “A”错误</li><li>字符串截取操作</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Intege.parseInt(&quot;A&quot;)是不能被直接转化成数字的，会报错</span></span><br><span class="line"><span class="comment">//正确做法是将&quot;A&quot;转化成&#x27;A&#x27;,然后直接强制类型转换就行</span></span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> (<span class="type">int</span>)code.toUpperCase().charAt(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="转换对象"><a href="#转换对象" class="headerlink" title="转换对象"></a>转换对象</h3><ul><li>实体对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.copyProperties(item,voItem);</span><br></pre></td></tr></table></figure><ul><li><code>list</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list1&lt;a&gt;   </span></span><br><span class="line"><span class="comment">// list2&lt;b&gt;</span></span><br><span class="line">BeanUtils.copytoList(list1,list2);</span><br><span class="line">list2&lt;b&gt; = BeanUtils.copytoList(list1,b.class);</span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ul><li><code>foreach()</code>增强for循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Vo vo : list)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>stream.map</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream().map((item)-&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li><code>list.foreach()</code> 和 <code>list.stream.foreach()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(item-&gt;&#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用流处理</span></span><br><span class="line">lsit.stream.foreach(item-&gt;&#123;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>迭代器 <code>iterator</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;xxx&gt; iterator = xxx.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">xxx</span> <span class="variable">xxx</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>自增运算符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> ++i + i++ + ++i + ++i + i++;</span><br><span class="line">System.out.println(j);<span class="comment">//18</span></span><br></pre></td></tr></table></figure><ul><li>逻辑运算符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//长路与  无论第一个表达式的值是true或者false,第二个的值，都会被运算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        System.out.println( i== <span class="number">1</span> &amp; i++ ==<span class="number">2</span>  ); <span class="comment">//无论如何i++都会被执行，所以i的值变成了3</span></span><br><span class="line">        System.out.println(i);         </span><br><span class="line">        <span class="comment">//短路与 只要第一个表达式的值是false的，第二个表达式的值，就不需要进行运算了</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        System.out.println( j== <span class="number">1</span> &amp;&amp; j++ ==<span class="number">2</span>  );  <span class="comment">//因为j==1返回false,所以右边的j++就没有执行了，所以j的值，还是2</span></span><br><span class="line">        System.out.println(j);              </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><blockquote><p>Api注解不是Spring自带的，他是swagger里面的，代码编写的时候需要在pom文件中引入相关swagger的依赖.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul><li><p>@Api：用在请求的类上，表示对类的说明。</p><ul><li>tags&#x3D;”说明该类的作用，可以在UI界面上看到的注解”，</li><li>value&#x3D;”该参数没什么意义，在UI界面上也看到，所以不需要配置”</li></ul></li><li><p>@ApiOperation：用在请求的方法上，说明方法的用途、作用。</p><ul><li>value &#x3D; “接口说明”，</li><li>httpMethod &#x3D; “接口请求方式”,</li><li>response &#x3D;“接口返回参数类型”, </li><li>notes &#x3D; “接口发布说明”；</li></ul></li><li><p>@ApiResponses：用在请求的方法上，表示一组响应</p><ul><li>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误或正确的响应信息<ul><li>code：数字，例如400</li><li>message：信息，例如”请求参数没填好”</li><li>response：抛出异常的类</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">        @ApiResponse(code = 0, message = &quot;请求成功&quot;),</span></span><br><span class="line"><span class="meta">        @ApiResponse(code = 1, message = &quot;请求失败&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><ul><li><p>@ApiModelProperty：用在属性上，描述响应类的属性</p><ul><li>value-字段说明；</li><li>name-重写属性名字；</li><li>dataType-重写属性类型；</li><li>required-是否必填；</li><li>example-举例说明；</li><li>hidden-隐藏</li></ul></li><li><p>@ApiImplicitParams：用在请求的方法上，表示一组参数说明</p><ul><li>@ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面<ul><li>name：参数名；value：参数的汉字说明、解释；required：参数是否必须传</li><li>paramType：参数放在哪个地方</li><li>header –&gt; 请求参数的获取：@RequestHeader</li><li>query –&gt; 请求参数的获取：@RequestParam</li><li>path（用于restful接口）–&gt; 请求参数的获取：@PathVariable</li><li>body（不常用）</li><li>form（不常用）</li><li>dataType：参数类型，默认String，其它值dataType&#x3D;”Integer”</li><li>defaultValue：参数的默认值</li></ul></li></ul></li><li><p>@ApiModel：用于响应类上，表示一个返回响应数据的信息。这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候</p></li></ul><hr><h2 id="hutool"><a href="#hutool" class="headerlink" title="hutool"></a>hutool</h2><h3 id="ObjectUtil的-isNull和-isEmpty"><a href="#ObjectUtil的-isNull和-isEmpty" class="headerlink" title="ObjectUtil的 isNull和 isEmpty"></a>ObjectUtil的 isNull和 isEmpty</h3><p><code>isNull(Object obj)</code>方法：</p><ul><li>该方法用于判断对象是否为 <code>null</code>。</li><li>如果传入的对象 <code>obj</code> 是 <code>null</code> 或者等于 <code>null</code>（通过调用 <code>equals</code> 方法进行判断），则返回 <code>true</code>，否则返回 <code>false</code>。</li><li>这个方法只关注对象是否为 <code>null</code>，不考虑对象的具体内容。</li></ul><p><code>isEmpty(Object obj)</code>方法：</p><ul><li>该方法用于判断对象是否为空。</li><li>如果传入的对象 <code>obj</code> 是 <code>null</code>，则返回 <code>true</code>。</li><li>如果传入的对象是 <code>CharSequence</code>（如字符串）、<code>Map</code>（如Map集合）、<code>Iterable</code>（如List、Set等可迭代对象）或<code>Iterator</code>（迭代器），则会调用对应的工具类方法来判断对象是否为空。比如，如果是字符串类型，则使用 <code>StrUtil.isEmpty</code> 方法来判断字符串是否为空。</li><li>如果传入的对象是数组类型，则使用 <code>ArrayUtil.isEmpty</code> 方法来判断数组是否为空。</li><li>如果传入的对象不属于上述类型，那么返回 <code>false</code>，表示对象不为空。</li></ul><blockquote><p>注意：<code>isEmpty() </code>方法会针对不同类型的对象调用相应的工具类方法来判断对象是否为空；<code>isNull()</code> 方法只关注对象是否为 null</p></blockquote><hr><h2 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h2><p><a href="https://jsoup.org/">Jsoup官方文档</a></p><h3 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h3><ul><li><p><code>Jsoup.parse(String html)</code>: 将HTML字符串解析成一个Document对象。</p></li><li><p><code>Jsoup.parse(File in, String charsetName)</code>: 从文件中解析HTML文档。</p></li><li><p><code>Jsoup.parse(URL url, int timeoutMillis)</code>: 从URL中解析HTML文档。</p><p>遍历和选择元素：</p></li><li><p><code>getElementsByTag(String tagName)</code>: 选择指定标签名的元素，返回一个Elements对象。</p></li><li><p><code>getElementById(String id)</code>: 选择具有指定id属性的元素，返回一个Element对象。</p></li><li><p><code>getElementsByClass(String className)</code>: 选择具有指定CSS类名的元素，返回一个Elements对象。</p></li><li><p><code>Document.select(String cssQuery)</code>: 使用CSS选择器选择元素，返回一个Elements对象。</p></li><li><p><code>Element.select(String cssQuery)</code>: 在当前元素的子元素中使用CSS选择器选择元素，返回一个Elements对象。</p></li><li><p><code>Elements.first()</code>: 返回Elements集合中的第一个元素。</p></li><li><p><code>Elements.last()</code>: 返回Elements集合中的最后一个元素。</p></li><li><p><code>Elements.get(int index)</code>: 返回Elements集合中指定索引位置的元素。</p></li><li><p><code>Elements.hasAttr(String attributeKey)</code>: 选择具有指定属性的元素。</p></li><li><p><code>Elements.not(String cssQuery)</code>: 排除符合指定选择器的元素。</p></li><li><p><code>Element.traverse(NodeVisitor nodeVisitor)</code>: 使用自定义的NodeVisitor遍历元素及其子元素。</p></li><li><p><code>Element.wrap(String html)</code>: 将元素用指定的HTML包装起来。</p></li><li><p><code>Element.unwrap()</code>: 移除元素的父元素，保留元素本身。</p></li></ul><h3 id="过滤元素"><a href="#过滤元素" class="headerlink" title="过滤元素"></a>过滤元素</h3><ul><li><code>Elements.filter(NodeFilter nodeFilter)</code>: 使用自定义的NodeFilter过滤元素。</li></ul><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><ul><li><code>Element.tagName()</code>: 获取元素的标签名。</li><li><code>Element.text()</code>: 获取元素的文本内容。</li><li><code>Element.html()</code>: 获取元素的HTML内容。</li><li><code>Element.attr(String attributeKey)</code>: 获取元素指定属性的值。</li><li><code>Element.attr(String attributeKey, String attributeValue)</code>: 设置元素指定属性的值。</li><li><code>Element.append(String html)</code>: 在元素的末尾添加HTML内容。</li><li><code>Element.prepend(String html)</code>: 在元素的开头添加HTML内容。</li><li><code>Element.after(String html)</code>: 在元素之后插入HTML内容。</li><li><code>Element.before(String html)</code>: 在元素之前插入HTML内容。</li><li><code>Element.remove()</code>: 移除元素。</li></ul><h3 id="提取和修改HTML文档结构"><a href="#提取和修改HTML文档结构" class="headerlink" title="提取和修改HTML文档结构"></a>提取和修改HTML文档结构</h3><ul><li><code>Document.body()</code>: 获取HTML文档的<code>&lt;body&gt;</code>元素。</li><li><code>Element.parent()</code>: 获取元素的父元素。</li><li><code>Element.children()</code>: 获取元素的直接子元素。</li><li><code>Element.clone()</code>: 克隆元素及其子元素。</li><li><code>Element.replaceWith(Node replacement)</code>: 用指定的节点替换元素。</li><li><code>Element.replaceWith(String html)</code>: 用指定的HTML内容替换元素。</li></ul><h3 id="操作CSS类"><a href="#操作CSS类" class="headerlink" title="操作CSS类"></a>操作CSS类</h3><ul><li><code>Element.hasClass(String className)</code>: 检查元素是否具有指定的CSS类。</li><li><code>Element.addClass(String className)</code>: 为元素添加CSS类。</li><li><code>Element.removeClass(String className)</code>: 从元素中移除指定的CSS类。</li></ul><h3 id="处理表单数据"><a href="#处理表单数据" class="headerlink" title="处理表单数据"></a>处理表单数据</h3><ul><li><code>FormElement.formData()</code>: 获取表单元素中的所有表单数据。</li></ul><h3 id="获取和设置表单数据"><a href="#获取和设置表单数据" class="headerlink" title="获取和设置表单数据"></a>获取和设置表单数据</h3><ul><li><code>Element.val()</code>: 获取或设置元素的值。</li><li><code>Element.val(String value)</code>: 设置元素的值。</li></ul><h3 id="处理相对和绝对URL"><a href="#处理相对和绝对URL" class="headerlink" title="处理相对和绝对URL"></a>处理相对和绝对URL</h3><ul><li><code>Element.absUrl(String attributeKey)</code>: 获取元素指定属性的绝对URL。</li></ul><h3 id="处理特殊字符和编码"><a href="#处理特殊字符和编码" class="headerlink" title="处理特殊字符和编码"></a>处理特殊字符和编码</h3><ul><li><code>Entities.escape(String string)</code>: 对HTML文本进行转义。</li><li><code>Entities.unescape(String string)</code>: 解码HTML文本中的特殊字符。</li></ul><hr><h2 id="Java数据脱敏"><a href="#Java数据脱敏" class="headerlink" title="Java数据脱敏"></a>Java数据脱敏</h2><h3 id="①-SQL数据脱敏实现"><a href="#①-SQL数据脱敏实现" class="headerlink" title="① SQL数据脱敏实现"></a>① SQL数据脱敏实现</h3><p><a href="https://www.jb51.net/article/213589.htm">MYSQL(电话号码,身份证)数据脱敏的实现</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CONCAT()、LEFT()和RIGHT()字符串函数组合使用，请看下面具体实现</span></span><br><span class="line"><span class="comment">-- CONCAT(str1,str2,…)：返回结果为连接参数产生的字符串</span></span><br><span class="line"><span class="comment">-- LEFT(str,len)：返回从字符串str 开始的len 最左字符</span></span><br><span class="line"><span class="comment">-- RIGHT(str,len)：从字符串str 开始，返回最右len 字符</span></span><br><span class="line"><span class="comment">-- 电话号码脱敏sql：</span></span><br><span class="line"><span class="keyword">SELECT</span> mobilePhone <span class="keyword">AS</span> 脱敏前电话号码,CONCAT(<span class="keyword">LEFT</span>(mobilePhone,<span class="number">3</span>), <span class="string">&#x27;********&#x27;</span> ) <span class="keyword">AS</span> 脱敏后电话号码 <span class="keyword">FROM</span> t_s_user</span><br><span class="line"><span class="comment">-- 身份证号码脱敏sql:</span></span><br><span class="line"><span class="keyword">SELECT</span> idcard <span class="keyword">AS</span> 未脱敏身份证, CONCAT(<span class="keyword">LEFT</span>(idcard,<span class="number">3</span>), <span class="string">&#x27;****&#x27;</span> ,<span class="keyword">RIGHT</span>(idcard,<span class="number">4</span>)) <span class="keyword">AS</span> 脱敏后身份证号 <span class="keyword">FROM</span> t_s_user</span><br></pre></td></tr></table></figure><h3 id="②-JAVA数据脱敏"><a href="#②-JAVA数据脱敏" class="headerlink" title="② JAVA数据脱敏"></a>② JAVA数据脱敏</h3><p>可参考：<a href="https://gitee.com/strong_sea/sensitive-plus?_from=gitee_search">sensitive-plus</a></p><p>数据脱敏插件，目前支持地址脱敏、银行卡号脱敏、中文姓名脱敏、固话脱敏、身份证号脱敏、手机号脱敏、密码脱敏 一个是正则脱敏、另外一个根据显示长度脱敏，默认是正则脱敏，可以根据自己的需要配置自己的规则。</p><h3 id="③-mybatis-mate-sensitive-jackson"><a href="#③-mybatis-mate-sensitive-jackson" class="headerlink" title="③ mybatis-mate-sensitive-jackson"></a>③ mybatis-mate-sensitive-jackson</h3><p><a href="https://gitee.com/baomidou/mybatis-mate-examples/tree/master/mybatis-mate-sensitive-jackson">mybatis-mate-sensitive-jackson</a></p><p>根据定义的策略类型，对数据进行脱敏，当然策略可以自定义。</p><hr><h2 id="BeanUtils-copyProperties的坑"><a href="#BeanUtils-copyProperties的坑" class="headerlink" title="BeanUtils.copyProperties的坑"></a>BeanUtils.copyProperties的坑</h2><p>我们日常开发中，经常涉及到<code>DO、DTO、VO</code>对象属性拷贝赋值，很容易想到<code>org.springframework.beans.BeanUtils</code>的<code>copyProperties </code>。它会自动通过反射机制获取源对象和目标对象的属性，<strong>并将对应的属性值进行复制</strong>。可以减少手动编写属性复制代码的工作量，提高代码的可读性和维护性。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/640.png" alt="img"></p><h3 id="第1个坑：类型不匹配"><a href="#第1个坑：类型不匹配" class="headerlink" title="第1个坑：类型不匹配"></a>第1个坑：类型不匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Long age;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String age;  </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">        source.setAge(<span class="number">25L</span>);   </span><br><span class="line">        <span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">        BeanUtils.copyProperties(source, target);    </span><br><span class="line">        System.out.println(target.getAge());  <span class="comment">//拷贝赋值失败，输出null  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>源对象<code>SourceBean</code>的<code>age</code>属性是<code>Long</code>类型，目标对象<code>TargetBean</code>的<code>age</code>属性是<code>String</code>类型。由于类型不匹配，<code>BeanUtils.copyProperties</code>赋值失败</p><h3 id="第2个坑：浅拷贝"><a href="#第2个坑：浅拷贝" class="headerlink" title="第2个坑：浅拷贝"></a>第2个坑：浅拷贝</h3><p>什么是深拷贝？什么是浅拷贝？</p><ul><li><p>浅拷贝是指创建一个新对象，该对象的属性值与原始对象相同，但对于引用类型的属性，仍然共享相同的引用。</p><blockquote><p>浅拷贝只复制对象及其引用，而不复制引用指向的对象本身</p></blockquote></li><li><p>深拷贝是指创建一个新对象，该对象的属性值与原始对象相同，包括引用类型的属性。</p><blockquote><p>深拷贝会递归复制引用对象，创建全新的对象，以确保拷贝后的对象与原始对象完全独立</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/641.png" alt="图片"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Address address;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">sourcePerson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">sourcePerson.setName(<span class="string">&quot;John&quot;</span>);  </span><br><span class="line"><span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();  </span><br><span class="line">address.setCity(<span class="string">&quot;New York&quot;</span>);  </span><br><span class="line">sourcePerson.setAddress(address);  </span><br><span class="line"><span class="type">Person</span> <span class="variable">targetPerson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">BeanUtils.copyProperties(sourcePerson, targetPerson);  </span><br><span class="line"></span><br><span class="line">sourcePerson.getAddress().setCity(<span class="string">&quot;London&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">System.out.println(targetPerson.getAddress().getCity());  <span class="comment">// 输出为 &quot;London&quot;  </span></span><br></pre></td></tr></table></figure><p>源对象<code>Person</code>的属性<code>address</code>是引用类型。使用<code>BeanUtils.copyProperties</code>方法进行属性复制时，只复制了引用。即目标对象<code>targetPerson</code>的 <code>address</code> 属性引用和源对象 <code>sourcePerson</code> 的 <code>address</code> 属性引用指向同一个对象。因此，当修改源对象的<code>address</code>对象时，目标对象的<code>address</code>对象也会被修改。</p><h3 id="第3个坑：属性名称不一致"><a href="#第3个坑：属性名称不一致" class="headerlink" title="第3个坑：属性名称不一致"></a>第3个坑：属性名称不一致</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String username;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String userName;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">source.setUsername(<span class="string">&quot;捡田螺的小男孩&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">BeanUtils.copyProperties(source, target);  </span><br><span class="line"></span><br><span class="line">System.out.println(target.getUserName());   <span class="comment">// 输出为 null  </span></span><br></pre></td></tr></table></figure><p>源对象<code>SourceBean</code> 的属性名称是<code>username</code>，而目标对象<code>TargetBean</code>的属性名称也是<code>userName</code>。但是，两个 <code>username</code>，一个N是大写，一个n是小写，即<strong>属性名称不一致</strong>，<code>BeanUtils.copyProperties</code>方法无法自动映射这些属性（无法忽略大小写自动匹配），因此目标对象的<code>userName</code>属性值为<code>null</code>。</p><blockquote><p> 日常开发注意：大小写不一致，差一两个字母等等</p></blockquote><h3 id="第4个坑：Null-值覆盖"><a href="#第4个坑：Null-值覆盖" class="headerlink" title="第4个坑：Null 值覆盖"></a>第4个坑：Null 值覆盖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;   </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String address;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;    </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String address;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">source.setName(<span class="string">&quot;John&quot;</span>);  </span><br><span class="line">source.setAddress(<span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">target.setAddress(<span class="string">&quot;田螺address&quot;</span>);  </span><br><span class="line">BeanUtils.copyProperties(source, target);  </span><br><span class="line">  </span><br><span class="line">System.out.println(target.getAddress());  <span class="comment">// 输出为 null  </span></span><br></pre></td></tr></table></figure><p>源对象 <code>SourceBean </code>的 address 属性值为 null。默认情况下，<code>BeanUtils.copyProperties</code> 方法会将源对象中的 null 值属性覆盖到目标对象中。因此，目标对象的 address 属性值也为 null。</p><p>如果不希望 null 值覆盖目标对象中的属性，可以用 <code>BeanUtils.copyProperties</code> 方法的重载方法，并传入一个自定义的 <code>ConvertUtilsBean</code> 实例来进行配置。</p><h3 id="第5个坑：注意引入的包"><a href="#第5个坑：注意引入的包" class="headerlink" title="第5个坑：注意引入的包"></a>第5个坑：注意引入的包</h3><p><code>BeanUtils.copyProperties</code>其实有两个包，分别是<code>spring、apache</code>。这两个包，是有点不一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.beans.BeanUtils(源对象在左边，目标对象在右边)  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyProperties</span><span class="params">(Object source, Object target)</span> <span class="keyword">throws</span> BeansException   </span><br><span class="line"><span class="comment">//org.apache.commons.beanutils.BeanUtils（源对象在右边，目标对象在左边）  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyProperties</span><span class="params">(Object dest, Object orig)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException  </span><br></pre></td></tr></table></figure><p>注意自己引入的哪个<code>BeanUtils</code>，写对应参数位置。</p><h3 id="第6个坑：Boolean类型数据-is属性开头的坑"><a href="#第6个坑：Boolean类型数据-is属性开头的坑" class="headerlink" title="第6个坑：Boolean类型数据+is属性开头的坑"></a>第6个坑：Boolean类型数据+is属性开头的坑</h3><p>把<code>SourceBean和TargetBean</code>中的都有个属性<code>isTianLuo</code>,它们的数据类型保持不变,但是一个为基本类型<code>boolean</code>，一个为包装类型<code>Boolean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isTianLuo;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Boolean isTianLuo;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>跑测试用里的时候，发现赋值不上：这是因为当属性类型为<code>boolean</code>时，属性名以<code>is</code>开头,属性名会去掉前面的<code>is</code>，因此源对象和目标对象属性对不上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">source.setTianLuo(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">BeanUtils.copyProperties(source, target);  </span><br><span class="line">System.out.println(target.getIsTianLuo()); <span class="comment">// 输出为 null  </span></span><br></pre></td></tr></table></figure><h3 id="第7个坑：查找不到字段引用"><a href="#第7个坑：查找不到字段引用" class="headerlink" title="第7个坑：查找不到字段引用"></a>第7个坑：查找不到字段引用</h3><p>在某些开发场景呢，如果我们要修改某个字段的赋值，我们可能会全文搜索它的所有<code>set</code>方法，看哪些地方引用到。但是如果使用<code>BeanUtils.copyProperties</code>就不知道是否引用到对应的ste方法啦<strong>，</strong>即查找不到字段引用，这就可能导致你会漏掉修改对应的字段。</p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/644.png" alt="图片"></p><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/643.png" alt="图片"></p><h3 id="第8个坑：不同内部类，即使相同属性，也是赋值失败"><a href="#第8个坑：不同内部类，即使相同属性，也是赋值失败" class="headerlink" title="第8个坑：不同内部类，即使相同属性，也是赋值失败"></a>第8个坑：不同内部类，即使相同属性，也是赋值失败</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopySource</span> &#123;   </span><br><span class="line">    <span class="keyword">public</span> String outerName;  </span><br><span class="line">    <span class="keyword">public</span> CopySource.InnerClass innerClass;    </span><br><span class="line">    <span class="meta">@Data</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> String InnerName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyTarget</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> String outerName;  </span><br><span class="line">    <span class="keyword">public</span> CopyTarget.InnerClass innerClass;   </span><br><span class="line">    <span class="meta">@Data</span>  </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> String InnerName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">CopySource</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopySource</span>();  </span><br><span class="line">test1.outerName = <span class="string">&quot;outTianluo&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">CopySource.<span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopySource</span>.InnerClass();  </span><br><span class="line">innerClass.InnerName = <span class="string">&quot;innerTianLuo&quot;</span>;  </span><br><span class="line">test1.innerClass = innerClass;  </span><br><span class="line">  </span><br><span class="line">System.out.println(test1);  </span><br><span class="line"><span class="type">CopyTarget</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyTarget</span>();  </span><br><span class="line">BeanUtils.copyProperties(test1, test2);  </span><br><span class="line">  </span><br><span class="line">System.out.println(test2);  <span class="comment">//输出CopyTarget(outerName=outTianluo, innerClass=null)  </span></span><br></pre></td></tr></table></figure><p><code>CopySource</code>和<code>CopyTarget</code>各自存在一个内部类<code>InnerClass</code>，虽然这个内部类属性也相同，类名也相同，但是在不同的类中，因此<code>Spring</code>会认为属性不同,不会<code>Copy</code>。如果要复制成功，可以让他们指向同一个内部类。</p><h3 id="第9个坑：bean对应的属性，没有getter和setter方法，赋值失败"><a href="#第9个坑：bean对应的属性，没有getter和setter方法，赋值失败" class="headerlink" title="第9个坑：bean对应的属性，没有getter和setter方法，赋值失败"></a>第9个坑：bean对应的属性，没有getter和setter方法，赋值失败</h3><p><code>BeanUtils.copyProperties</code>要拷贝属性值成功，需要对应的<code>bean</code>有<code>getter和setter</code>方法。因为它是用反射拿到set和get方法再去拿属性值和设置属性值的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@Getter</span>   <span class="comment">//没有对应的setter方法  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">SourceBean</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">source.setValue(<span class="string">&quot;捡田螺的小男孩&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">BeanUtils.copyProperties(source, target);  </span><br><span class="line">System.out.println(target.getValue()); <span class="comment">//输出null   </span></span><br></pre></td></tr></table></figure><h3 id="第10个坑：BeanUtils-copyProperties-泛型"><a href="#第10个坑：BeanUtils-copyProperties-泛型" class="headerlink" title="第10个坑：BeanUtils.copyProperties + 泛型"></a>第10个坑：BeanUtils.copyProperties + 泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopySource</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> String outerName;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;CopySource.InnerClass&gt; clazz;    </span><br><span class="line">    <span class="meta">@Data</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> String InnerName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@ToString</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyTarget</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> String outerName;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;CopyTarget.InnerClass&gt; clazz;    </span><br><span class="line">    <span class="meta">@Data</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> String InnerName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">CopySource</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopySource</span>();  </span><br><span class="line">test1.outerName = <span class="string">&quot;outTianluo&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">CopySource.<span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopySource</span>.InnerClass();  </span><br><span class="line">innerClass.InnerName = <span class="string">&quot;innerTianLuo&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">List&lt;CopySource.InnerClass&gt; clazz = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">clazz.add(innerClass);  </span><br><span class="line">test1.setClazz(clazz);  </span><br><span class="line">  </span><br><span class="line">System.out.println(test1);  </span><br><span class="line"><span class="type">CopyTarget</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyTarget</span>();  </span><br><span class="line">BeanUtils.copyProperties(test1, test2);  </span><br><span class="line">  </span><br><span class="line">System.out.println(test2);  <span class="comment">//输出CopyTarget(outerName=outTianluo, clazz=null)  </span></span><br></pre></td></tr></table></figure><p><code>BeanUtils.copyProperties</code>方法拷贝包含泛型属性的对象<code>clazz</code>。<code>CopyTarget</code>和<code>CopySource</code>的泛型属性类型不匹配，因此拷贝赋值失败。</p><h3 id="第11个坑：性能问题"><a href="#第11个坑：性能问题" class="headerlink" title="第11个坑：性能问题"></a>第11个坑：性能问题</h3><p>由于这些<code>BeanUtils</code>类都是采用反射机制实现的，对程序的效率也会有影响。<code>demo</code>对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SourceBean</span> <span class="variable">sourceBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SourceBean</span>();  </span><br><span class="line">sourceBean.setName(<span class="string">&quot;tianLuoBoy&quot;</span>);  </span><br><span class="line"><span class="type">TargetBean</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetBean</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;  <span class="comment">//循环10万次  </span></span><br><span class="line">      target.setName(sourceBean.getName());  </span><br><span class="line">&#125;  </span><br><span class="line">System.out.println(<span class="string">&quot;common setter time:&quot;</span> + (System.currentTimeMillis() - beginTime));  </span><br><span class="line">  </span><br><span class="line"><span class="type">long</span> <span class="variable">beginTime1</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;  <span class="comment">//循环10万次  </span></span><br><span class="line">    BeanUtils.copyProperties(sourceBean, target);  </span><br><span class="line">&#125;  </span><br><span class="line">System.out.println(<span class="string">&quot;bean copy time:&quot;</span> + (System.currentTimeMillis() - beginTime1));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//输出  </span></span><br><span class="line">common setter time:<span class="number">3</span>  </span><br><span class="line">bean copy time:<span class="number">331</span>  </span><br></pre></td></tr></table></figure><p>可以发现，简单的<code>setter</code>和<code>BeanUtils.copyProperties</code>对比，性能差距非常大。因此，慎用<code>BeanUtils.copyProperties</code></p><h3 id="替换BeanUtils-copyProperties的方案"><a href="#替换BeanUtils-copyProperties的方案" class="headerlink" title="替换BeanUtils.copyProperties的方案"></a>替换BeanUtils.copyProperties的方案</h3><p><strong>第一种</strong>，那就是使用原始的<code>setter和getter</code>方法。</p><blockquote><p>使用手动的setter方法进行属性赋值。这种方法可能需要编写更多的代码，但是可以提供更细粒度的控制，并且在性能方面通常比BeanUtils.copyProperties更高效。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();  </span><br><span class="line">target.setName(source.getName());  </span><br><span class="line">target.setAge(source.getAge());  </span><br></pre></td></tr></table></figure><p>如果实在对象<code>bean</code>的属性比较多的话，可以使用插件<code>GenerateAllSetter</code>，它可以一键生成对象的<code>set</code>方法，挺方便的。</p><p><strong>第二种方案</strong>，使用映射工具库，如<code>MapStruct、ModelMapper</code>等，它们可以自动生成属性映射的代码。这些工具库可以减少手动编写setter方法的工作量，并提供更好的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SourceTargetMapper</span> &#123;  </span><br><span class="line">    <span class="type">SourceTargetMapper</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> Mappers.getMapper(SourceTargetMapper.class);  </span><br><span class="line">    <span class="meta">@Mapping(source = &quot;name&quot;, target = &quot;name&quot;)</span>  </span><br><span class="line">    <span class="meta">@Mapping(source = &quot;age&quot;, target = &quot;age&quot;)</span>  </span><br><span class="line">    Target <span class="title function_">mapToTarget</span><span class="params">(Source source)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> SourceTargetMapper.INSTANCE.mapToTarget(source);</span><br></pre></td></tr></table></figure><hr><h2 id="导出文件相关"><a href="#导出文件相关" class="headerlink" title="导出文件相关"></a>导出文件相关</h2><h3 id="递归输出文件夹里全部文件名"><a href="#递归输出文件夹里全部文件名" class="headerlink" title="递归输出文件夹里全部文件名"></a>递归输出文件夹里全部文件名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listFilesRecursively</span><span class="params">(File folder)</span> &#123;</span><br><span class="line">    File[] contents = folder.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (contents != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File item : contents) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.isFile()) &#123;</span><br><span class="line">                System.out.println(item.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.isDirectory()) &#123;</span><br><span class="line">                listFilesRecursively(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 替换为你想要遍历的文件夹路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">folderPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\Typora\\touchfish\\9.PDF books&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(folderPath);</span><br><span class="line">    listFilesRecursively(folder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导出为docx或流文件"><a href="#导出为docx或流文件" class="headerlink" title="导出为docx或流文件"></a>导出为docx或流文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出到指定路径的docx文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(templatePath + paperName + <span class="string">&quot;.docx&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">FileUtils.del(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出为流文件：</span></span><br><span class="line"><span class="comment">// 1.直接返回response的二进制流，这种在response里的流不能携带其他任何信息</span></span><br><span class="line"><span class="comment">// response.setContentType(&quot;application/octet-stream&quot;);</span></span><br><span class="line"><span class="comment">// response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename=paper.docx&quot;);</span></span><br><span class="line"><span class="comment">//2.返回带信息的流,可以封装一个实体包括信息和转为base64格式的二进制流文件</span></span><br><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">//用Base64转换二级制流导出错误数据，用于前端下载</span></span><br><span class="line">ExcelUtil.exportTemplate(errorStudentList,<span class="string">&quot;excel/exportStudentTemplate.xlsx&quot;</span>, os);</span><br><span class="line">    <span class="type">String</span> <span class="variable">encodeToString</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(os.toByteArray());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;导入异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态导出表头"><a href="#动态导出表头" class="headerlink" title="动态导出表头"></a>动态导出表头</h3><p><img src="https://cdn.jsdelivr.net/gh/cxz206015/For-PicGo@main/img/image-20230918113035142.png" alt="image-20230918113035142"></p><hr><h2 id="调用微信接口"><a href="#调用微信接口" class="headerlink" title="调用微信接口"></a>调用微信接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_ID</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_SECRET</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP_NAME</span> <span class="operator">=</span> <span class="string">&quot;森林之父游戏群&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NEW_GROUP_NAME</span> <span class="operator">=</span> <span class="string">&quot;森林之子游戏群&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取访问凭证</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> getAccessToken();</span><br><span class="line">            <span class="keyword">if</span> (accessToken == <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Failed to get access token.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取微信群列表</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">groupListJson</span> <span class="operator">=</span> getWeChatGroupList(accessToken);</span><br><span class="line">            <span class="keyword">if</span> (groupListJson == <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Failed to get WeChat group list.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据群名称查找群ID</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">groupId</span> <span class="operator">=</span> findGroupIdByGroupName(groupListJson, GROUP_NAME);</span><br><span class="line">            <span class="keyword">if</span> (groupId == <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Target group not found.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 修改群名称</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> updateGroupName(accessToken, groupId, NEW_GROUP_NAME);</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Group name updated successfully.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Failed to update group name.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getAccessToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&quot;</span></span><br><span class="line">                + APP_ID + <span class="string">&quot;&amp;secret=&quot;</span> + APP_SECRET;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解析返回的 JSON 数据，获取访问凭证</span></span><br><span class="line">            <span class="comment">// 这里仅作示例，假设返回的 JSON 数据中有一个字段为 &quot;access_token&quot;</span></span><br><span class="line">            <span class="comment">// 实际情况中，请根据微信返回的 JSON 数据结构来解析访问凭证</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> response.indexOf(<span class="string">&quot;\&quot;access_token\&quot;:\&quot;&quot;</span>) + <span class="number">16</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> response.indexOf(<span class="string">&quot;\&quot;,\&quot;expires_in\&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> response.substring(startIndex, endIndex);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to get access token. Response code: &quot;</span> + connection.getResponseCode());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getWeChatGroupList</span><span class="params">(String accessToken)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/groups/get?access_token=&quot;</span> + accessToken;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> response.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to get WeChat group list. Response code: &quot;</span> + connection.getResponseCode());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">findGroupIdByGroupName</span><span class="params">(String groupListJson, String groupName)</span> &#123;</span><br><span class="line">        <span class="comment">// 解析微信群列表的 JSON 数据，查找目标群的群ID</span></span><br><span class="line">        <span class="comment">// 这里仅作示例，假设返回的 JSON 数据中有一个字段为 &quot;groups&quot;，其中包含群列表</span></span><br><span class="line">        <span class="comment">// 实际情况中，请根据微信返回的 JSON 数据结构来解析群列表和群ID</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">groupId</span> <span class="operator">=</span> <span class="string">&quot;YOUR_GROUP_ID&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> groupId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">updateGroupName</span><span class="params">(String accessToken, String groupId, String newGroupName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/groups/update?access_token=&quot;</span> + accessToken;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建修改群名称的请求体</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestBody</span> <span class="operator">=</span> String.format(<span class="string">&quot;&#123;\&quot;group\&quot;:&#123;\&quot;id\&quot;:%s,\&quot;name\&quot;:\&quot;%s\&quot;&#125;&#125;&quot;</span>,</span><br><span class="line">                groupId, URLEncoder.encode(newGroupName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">        connection.getOutputStream().write(requestBody.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                response.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解析返回的 JSON 数据，检查修改是否成功</span></span><br><span class="line">            <span class="comment">// 这里仅作示例，假设返回的 JSON 数据中有一个字段为 &quot;errcode&quot;，为 0 表示修改成功</span></span><br><span class="line">            <span class="comment">// 实际情况中，请根据微信返回的 JSON 数据结构来解析修改结果</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">errCode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (errCode == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Failed to update group name. Error code: &quot;</span> + errCode);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to update group name. Response code: &quot;</span> + connection.getResponseCode());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><h3 id="项目中有没有用到AOP？"><a href="#项目中有没有用到AOP？" class="headerlink" title="项目中有没有用到AOP？"></a>项目中有没有用到AOP？</h3><blockquote><p>当时在后台管理系统中，使用了aop的环绕通知+切点表达式，这个表达式就是要找到要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，比如类信息、注解、请求方式的等，获取到这些参数以后，保存到数据库。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
